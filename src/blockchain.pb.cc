// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#include "blockchain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr block_record::block_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_file_contains_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_header_(nullptr)
  , m_height_(0u)
  , m_number_of_transactions_(0u)
  , m_position_in_file_(0)
  , m_size_of_binary_data_(0u){}
struct block_recordDefaultTypeInternal {
  constexpr block_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_recordDefaultTypeInternal() {}
  union {
    block_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_recordDefaultTypeInternal _block_record_default_instance_;
constexpr file_info_record::file_info_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_number_of_blocks_(0u)
  , m_filesize_(0u)
  , m_height_lowest_(0u)
  , m_height_highest_(0u){}
struct file_info_recordDefaultTypeInternal {
  constexpr file_info_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~file_info_recordDefaultTypeInternal() {}
  union {
    file_info_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT file_info_recordDefaultTypeInternal _file_info_record_default_instance_;
constexpr transaction_record::transaction_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_file_contains_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_blockid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_offset_of_block_(0u)
  , m_offset_of_transaction_(0u){}
struct transaction_recordDefaultTypeInternal {
  constexpr transaction_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_recordDefaultTypeInternal() {}
  union {
    transaction_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_recordDefaultTypeInternal _transaction_record_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blockchain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2eproto = nullptr;

const uint32_t TableStruct_blockchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::block_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_header_),
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_height_),
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_number_of_transactions_),
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_file_contains_block_),
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_position_in_file_),
  PROTOBUF_FIELD_OFFSET(::proto::block_record, m_size_of_binary_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::file_info_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::file_info_record, m_number_of_blocks_),
  PROTOBUF_FIELD_OFFSET(::proto::file_info_record, m_filesize_),
  PROTOBUF_FIELD_OFFSET(::proto::file_info_record, m_height_lowest_),
  PROTOBUF_FIELD_OFFSET(::proto::file_info_record, m_height_highest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::transaction_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::transaction_record, m_file_contains_block_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_record, m_offset_of_block_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_record, m_offset_of_transaction_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_record, m_blockid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::block_record)},
  { 12, -1, -1, sizeof(::proto::file_info_record)},
  { 22, -1, -1, sizeof(::proto::transaction_record)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_block_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_file_info_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_transaction_record_default_instance_),
};

const char descriptor_table_protodef_blockchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020blockchain.proto\022\005proto\032\tp2p.proto\"\275\001\n"
  "\014block_record\022\037\n\010m_header\030\001 \001(\0132\r.proto."
  "header\022\020\n\010m_height\030\002 \001(\r\022 \n\030m_number_of_"
  "transactions\030\003 \001(\r\022\035\n\025m_file_contains_bl"
  "ock\030\004 \001(\t\022\032\n\022m_position_in_file\030\005 \001(\021\022\035\n"
  "\025m_size_of_binary_data\030\006 \001(\r\"u\n\020file_inf"
  "o_record\022\032\n\022m_number_of_blocks\030\001 \001(\r\022\022\n\n"
  "m_filesize\030\002 \001(\r\022\027\n\017m_height_lowest\030\003 \001("
  "\r\022\030\n\020m_height_highest\030\004 \001(\r\"\202\001\n\022transact"
  "ion_record\022\035\n\025m_file_contains_block\030\001 \001("
  "\t\022\031\n\021m_offset_of_block\030\002 \001(\r\022\037\n\027m_offset"
  "_of_transaction\030\003 \001(\r\022\021\n\tm_blockid\030\004 \001(\014"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_blockchain_2eproto_deps[1] = {
  &::descriptor_table_p2p_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto = {
  false, false, 488, descriptor_table_protodef_blockchain_2eproto, "blockchain.proto", 
  &descriptor_table_blockchain_2eproto_once, descriptor_table_blockchain_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_blockchain_2eproto::offsets,
  file_level_metadata_blockchain_2eproto, file_level_enum_descriptors_blockchain_2eproto, file_level_service_descriptors_blockchain_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blockchain_2eproto_getter() {
  return &descriptor_table_blockchain_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blockchain_2eproto(&descriptor_table_blockchain_2eproto);
namespace proto {

// ===================================================================

class block_record::_Internal {
 public:
  static const ::proto::header& m_header(const block_record* msg);
};

const ::proto::header&
block_record::_Internal::m_header(const block_record* msg) {
  return *msg->m_header_;
}
void block_record::clear_m_header() {
  if (GetArenaForAllocation() == nullptr && m_header_ != nullptr) {
    delete m_header_;
  }
  m_header_ = nullptr;
}
block_record::block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.block_record)
}
block_record::block_record(const block_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_file_contains_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_file_contains_block().empty()) {
    m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_file_contains_block(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_m_header()) {
    m_header_ = new ::proto::header(*from.m_header_);
  } else {
    m_header_ = nullptr;
  }
  ::memcpy(&m_height_, &from.m_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_size_of_binary_data_) -
    reinterpret_cast<char*>(&m_height_)) + sizeof(m_size_of_binary_data_));
  // @@protoc_insertion_point(copy_constructor:proto.block_record)
}

inline void block_record::SharedCtor() {
m_file_contains_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_size_of_binary_data_) -
    reinterpret_cast<char*>(&m_header_)) + sizeof(m_size_of_binary_data_));
}

block_record::~block_record() {
  // @@protoc_insertion_point(destructor:proto.block_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_file_contains_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete m_header_;
}

void block_record::ArenaDtor(void* object) {
  block_record* _this = reinterpret_cast< block_record* >(object);
  (void)_this;
}
void block_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_record::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.block_record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_file_contains_block_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && m_header_ != nullptr) {
    delete m_header_;
  }
  m_header_ = nullptr;
  ::memset(&m_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_size_of_binary_data_) -
      reinterpret_cast<char*>(&m_height_)) + sizeof(m_size_of_binary_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.header m_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          m_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_number_of_transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          m_number_of_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string m_file_contains_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_file_contains_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.block_record.m_file_contains_block"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 m_position_in_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          m_position_in_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_size_of_binary_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          m_size_of_binary_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* block_record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.block_record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.header m_header = 1;
  if (this->_internal_has_m_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_header(this), target, stream);
  }

  // uint32 m_height = 2;
  if (this->_internal_m_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_height(), target);
  }

  // uint32 m_number_of_transactions = 3;
  if (this->_internal_m_number_of_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_number_of_transactions(), target);
  }

  // string m_file_contains_block = 4;
  if (!this->_internal_m_file_contains_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_file_contains_block().data(), static_cast<int>(this->_internal_m_file_contains_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.block_record.m_file_contains_block");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m_file_contains_block(), target);
  }

  // sint32 m_position_in_file = 5;
  if (this->_internal_m_position_in_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_m_position_in_file(), target);
  }

  // uint32 m_size_of_binary_data = 6;
  if (this->_internal_m_size_of_binary_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_m_size_of_binary_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.block_record)
  return target;
}

size_t block_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.block_record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_file_contains_block = 4;
  if (!this->_internal_m_file_contains_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_file_contains_block());
  }

  // .proto.header m_header = 1;
  if (this->_internal_has_m_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_header_);
  }

  // uint32 m_height = 2;
  if (this->_internal_m_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_height());
  }

  // uint32 m_number_of_transactions = 3;
  if (this->_internal_m_number_of_transactions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_number_of_transactions());
  }

  // sint32 m_position_in_file = 5;
  if (this->_internal_m_position_in_file() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_m_position_in_file());
  }

  // uint32 m_size_of_binary_data = 6;
  if (this->_internal_m_size_of_binary_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_size_of_binary_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_record::GetClassData() const { return &_class_data_; }

void block_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<block_record *>(to)->MergeFrom(
      static_cast<const block_record &>(from));
}


void block_record::MergeFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.block_record)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_file_contains_block().empty()) {
    _internal_set_m_file_contains_block(from._internal_m_file_contains_block());
  }
  if (from._internal_has_m_header()) {
    _internal_mutable_m_header()->::proto::header::MergeFrom(from._internal_m_header());
  }
  if (from._internal_m_height() != 0) {
    _internal_set_m_height(from._internal_m_height());
  }
  if (from._internal_m_number_of_transactions() != 0) {
    _internal_set_m_number_of_transactions(from._internal_m_number_of_transactions());
  }
  if (from._internal_m_position_in_file() != 0) {
    _internal_set_m_position_in_file(from._internal_m_position_in_file());
  }
  if (from._internal_m_size_of_binary_data() != 0) {
    _internal_set_m_size_of_binary_data(from._internal_m_size_of_binary_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_record::CopyFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.block_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_record::IsInitialized() const {
  return true;
}

void block_record::InternalSwap(block_record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_file_contains_block_, lhs_arena,
      &other->m_file_contains_block_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_record, m_size_of_binary_data_)
      + sizeof(block_record::m_size_of_binary_data_)
      - PROTOBUF_FIELD_OFFSET(block_record, m_header_)>(
          reinterpret_cast<char*>(&m_header_),
          reinterpret_cast<char*>(&other->m_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[0]);
}

// ===================================================================

class file_info_record::_Internal {
 public:
};

file_info_record::file_info_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.file_info_record)
}
file_info_record::file_info_record(const file_info_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_number_of_blocks_, &from.m_number_of_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_height_highest_) -
    reinterpret_cast<char*>(&m_number_of_blocks_)) + sizeof(m_height_highest_));
  // @@protoc_insertion_point(copy_constructor:proto.file_info_record)
}

inline void file_info_record::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_number_of_blocks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_height_highest_) -
    reinterpret_cast<char*>(&m_number_of_blocks_)) + sizeof(m_height_highest_));
}

file_info_record::~file_info_record() {
  // @@protoc_insertion_point(destructor:proto.file_info_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void file_info_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void file_info_record::ArenaDtor(void* object) {
  file_info_record* _this = reinterpret_cast< file_info_record* >(object);
  (void)_this;
}
void file_info_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void file_info_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void file_info_record::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.file_info_record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_number_of_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_height_highest_) -
      reinterpret_cast<char*>(&m_number_of_blocks_)) + sizeof(m_height_highest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* file_info_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 m_number_of_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          m_number_of_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          m_filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_height_lowest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          m_height_lowest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_height_highest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          m_height_highest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* file_info_record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.file_info_record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_number_of_blocks = 1;
  if (this->_internal_m_number_of_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_number_of_blocks(), target);
  }

  // uint32 m_filesize = 2;
  if (this->_internal_m_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_filesize(), target);
  }

  // uint32 m_height_lowest = 3;
  if (this->_internal_m_height_lowest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_height_lowest(), target);
  }

  // uint32 m_height_highest = 4;
  if (this->_internal_m_height_highest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_m_height_highest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.file_info_record)
  return target;
}

size_t file_info_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.file_info_record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 m_number_of_blocks = 1;
  if (this->_internal_m_number_of_blocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_number_of_blocks());
  }

  // uint32 m_filesize = 2;
  if (this->_internal_m_filesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_filesize());
  }

  // uint32 m_height_lowest = 3;
  if (this->_internal_m_height_lowest() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_height_lowest());
  }

  // uint32 m_height_highest = 4;
  if (this->_internal_m_height_highest() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_height_highest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData file_info_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    file_info_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*file_info_record::GetClassData() const { return &_class_data_; }

void file_info_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<file_info_record *>(to)->MergeFrom(
      static_cast<const file_info_record &>(from));
}


void file_info_record::MergeFrom(const file_info_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.file_info_record)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_m_number_of_blocks() != 0) {
    _internal_set_m_number_of_blocks(from._internal_m_number_of_blocks());
  }
  if (from._internal_m_filesize() != 0) {
    _internal_set_m_filesize(from._internal_m_filesize());
  }
  if (from._internal_m_height_lowest() != 0) {
    _internal_set_m_height_lowest(from._internal_m_height_lowest());
  }
  if (from._internal_m_height_highest() != 0) {
    _internal_set_m_height_highest(from._internal_m_height_highest());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void file_info_record::CopyFrom(const file_info_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.file_info_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_info_record::IsInitialized() const {
  return true;
}

void file_info_record::InternalSwap(file_info_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(file_info_record, m_height_highest_)
      + sizeof(file_info_record::m_height_highest_)
      - PROTOBUF_FIELD_OFFSET(file_info_record, m_number_of_blocks_)>(
          reinterpret_cast<char*>(&m_number_of_blocks_),
          reinterpret_cast<char*>(&other->m_number_of_blocks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata file_info_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[1]);
}

// ===================================================================

class transaction_record::_Internal {
 public:
};

transaction_record::transaction_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.transaction_record)
}
transaction_record::transaction_record(const transaction_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_file_contains_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_file_contains_block().empty()) {
    m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_file_contains_block(), 
      GetArenaForAllocation());
  }
  m_blockid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_blockid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_blockid().empty()) {
    m_blockid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_blockid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&m_offset_of_block_, &from.m_offset_of_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_offset_of_transaction_) -
    reinterpret_cast<char*>(&m_offset_of_block_)) + sizeof(m_offset_of_transaction_));
  // @@protoc_insertion_point(copy_constructor:proto.transaction_record)
}

inline void transaction_record::SharedCtor() {
m_file_contains_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_blockid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_blockid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_offset_of_block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_offset_of_transaction_) -
    reinterpret_cast<char*>(&m_offset_of_block_)) + sizeof(m_offset_of_transaction_));
}

transaction_record::~transaction_record() {
  // @@protoc_insertion_point(destructor:proto.transaction_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_file_contains_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_blockid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_record::ArenaDtor(void* object) {
  transaction_record* _this = reinterpret_cast< transaction_record* >(object);
  (void)_this;
}
void transaction_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_record::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.transaction_record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_file_contains_block_.ClearToEmpty();
  m_blockid_.ClearToEmpty();
  ::memset(&m_offset_of_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_offset_of_transaction_) -
      reinterpret_cast<char*>(&m_offset_of_block_)) + sizeof(m_offset_of_transaction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string m_file_contains_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_file_contains_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.transaction_record.m_file_contains_block"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_offset_of_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          m_offset_of_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_offset_of_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          m_offset_of_transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_blockid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_blockid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.transaction_record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_file_contains_block = 1;
  if (!this->_internal_m_file_contains_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_file_contains_block().data(), static_cast<int>(this->_internal_m_file_contains_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.transaction_record.m_file_contains_block");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_file_contains_block(), target);
  }

  // uint32 m_offset_of_block = 2;
  if (this->_internal_m_offset_of_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_offset_of_block(), target);
  }

  // uint32 m_offset_of_transaction = 3;
  if (this->_internal_m_offset_of_transaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_offset_of_transaction(), target);
  }

  // bytes m_blockid = 4;
  if (!this->_internal_m_blockid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_m_blockid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.transaction_record)
  return target;
}

size_t transaction_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.transaction_record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_file_contains_block = 1;
  if (!this->_internal_m_file_contains_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_file_contains_block());
  }

  // bytes m_blockid = 4;
  if (!this->_internal_m_blockid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_blockid());
  }

  // uint32 m_offset_of_block = 2;
  if (this->_internal_m_offset_of_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_offset_of_block());
  }

  // uint32 m_offset_of_transaction = 3;
  if (this->_internal_m_offset_of_transaction() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_offset_of_transaction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_record::GetClassData() const { return &_class_data_; }

void transaction_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_record *>(to)->MergeFrom(
      static_cast<const transaction_record &>(from));
}


void transaction_record::MergeFrom(const transaction_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.transaction_record)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_file_contains_block().empty()) {
    _internal_set_m_file_contains_block(from._internal_m_file_contains_block());
  }
  if (!from._internal_m_blockid().empty()) {
    _internal_set_m_blockid(from._internal_m_blockid());
  }
  if (from._internal_m_offset_of_block() != 0) {
    _internal_set_m_offset_of_block(from._internal_m_offset_of_block());
  }
  if (from._internal_m_offset_of_transaction() != 0) {
    _internal_set_m_offset_of_transaction(from._internal_m_offset_of_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_record::CopyFrom(const transaction_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.transaction_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_record::IsInitialized() const {
  return true;
}

void transaction_record::InternalSwap(transaction_record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_file_contains_block_, lhs_arena,
      &other->m_file_contains_block_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_blockid_, lhs_arena,
      &other->m_blockid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_record, m_offset_of_transaction_)
      + sizeof(transaction_record::m_offset_of_transaction_)
      - PROTOBUF_FIELD_OFFSET(transaction_record, m_offset_of_block_)>(
          reinterpret_cast<char*>(&m_offset_of_block_),
          reinterpret_cast<char*>(&other->m_offset_of_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::block_record* Arena::CreateMaybeMessage< ::proto::block_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::block_record >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::file_info_record* Arena::CreateMaybeMessage< ::proto::file_info_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::file_info_record >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::transaction_record* Arena::CreateMaybeMessage< ::proto::transaction_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::transaction_record >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
