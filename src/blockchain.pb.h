// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "p2p.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto;
namespace proto {
class block_record;
struct block_recordDefaultTypeInternal;
extern block_recordDefaultTypeInternal _block_record_default_instance_;
class file_info_record;
struct file_info_recordDefaultTypeInternal;
extern file_info_recordDefaultTypeInternal _file_info_record_default_instance_;
class transaction_record;
struct transaction_recordDefaultTypeInternal;
extern transaction_recordDefaultTypeInternal _transaction_record_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::block_record* Arena::CreateMaybeMessage<::proto::block_record>(Arena*);
template<> ::proto::file_info_record* Arena::CreateMaybeMessage<::proto::file_info_record>(Arena*);
template<> ::proto::transaction_record* Arena::CreateMaybeMessage<::proto::transaction_record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class block_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.block_record) */ {
 public:
  inline block_record() : block_record(nullptr) {}
  ~block_record() override;
  explicit constexpr block_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_record(const block_record& from);
  block_record(block_record&& from) noexcept
    : block_record() {
    *this = ::std::move(from);
  }

  inline block_record& operator=(const block_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_record& operator=(block_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_record* internal_default_instance() {
    return reinterpret_cast<const block_record*>(
               &_block_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(block_record& a, block_record& b) {
    a.Swap(&b);
  }
  inline void Swap(block_record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  block_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<block_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.block_record";
  }
  protected:
  explicit block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFileContainsBlockFieldNumber = 4,
    kMHeaderFieldNumber = 1,
    kMHeightFieldNumber = 2,
    kMNumberOfTransactionsFieldNumber = 3,
    kMPositionInFileFieldNumber = 5,
    kMSizeOfBinaryDataFieldNumber = 6,
  };
  // string m_file_contains_block = 4;
  void clear_m_file_contains_block();
  const std::string& m_file_contains_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_file_contains_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_file_contains_block();
  PROTOBUF_NODISCARD std::string* release_m_file_contains_block();
  void set_allocated_m_file_contains_block(std::string* m_file_contains_block);
  private:
  const std::string& _internal_m_file_contains_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_file_contains_block(const std::string& value);
  std::string* _internal_mutable_m_file_contains_block();
  public:

  // .proto.header m_header = 1;
  bool has_m_header() const;
  private:
  bool _internal_has_m_header() const;
  public:
  void clear_m_header();
  const ::proto::header& m_header() const;
  PROTOBUF_NODISCARD ::proto::header* release_m_header();
  ::proto::header* mutable_m_header();
  void set_allocated_m_header(::proto::header* m_header);
  private:
  const ::proto::header& _internal_m_header() const;
  ::proto::header* _internal_mutable_m_header();
  public:
  void unsafe_arena_set_allocated_m_header(
      ::proto::header* m_header);
  ::proto::header* unsafe_arena_release_m_header();

  // uint32 m_height = 2;
  void clear_m_height();
  uint32_t m_height() const;
  void set_m_height(uint32_t value);
  private:
  uint32_t _internal_m_height() const;
  void _internal_set_m_height(uint32_t value);
  public:

  // uint32 m_number_of_transactions = 3;
  void clear_m_number_of_transactions();
  uint32_t m_number_of_transactions() const;
  void set_m_number_of_transactions(uint32_t value);
  private:
  uint32_t _internal_m_number_of_transactions() const;
  void _internal_set_m_number_of_transactions(uint32_t value);
  public:

  // sint32 m_position_in_file = 5;
  void clear_m_position_in_file();
  int32_t m_position_in_file() const;
  void set_m_position_in_file(int32_t value);
  private:
  int32_t _internal_m_position_in_file() const;
  void _internal_set_m_position_in_file(int32_t value);
  public:

  // uint32 m_size_of_binary_data = 6;
  void clear_m_size_of_binary_data();
  uint32_t m_size_of_binary_data() const;
  void set_m_size_of_binary_data(uint32_t value);
  private:
  uint32_t _internal_m_size_of_binary_data() const;
  void _internal_set_m_size_of_binary_data(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.block_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_file_contains_block_;
  ::proto::header* m_header_;
  uint32_t m_height_;
  uint32_t m_number_of_transactions_;
  int32_t m_position_in_file_;
  uint32_t m_size_of_binary_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class file_info_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.file_info_record) */ {
 public:
  inline file_info_record() : file_info_record(nullptr) {}
  ~file_info_record() override;
  explicit constexpr file_info_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  file_info_record(const file_info_record& from);
  file_info_record(file_info_record&& from) noexcept
    : file_info_record() {
    *this = ::std::move(from);
  }

  inline file_info_record& operator=(const file_info_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline file_info_record& operator=(file_info_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const file_info_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const file_info_record* internal_default_instance() {
    return reinterpret_cast<const file_info_record*>(
               &_file_info_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(file_info_record& a, file_info_record& b) {
    a.Swap(&b);
  }
  inline void Swap(file_info_record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(file_info_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  file_info_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<file_info_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const file_info_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const file_info_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(file_info_record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.file_info_record";
  }
  protected:
  explicit file_info_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNumberOfBlocksFieldNumber = 1,
    kMFilesizeFieldNumber = 2,
    kMHeightLowestFieldNumber = 3,
    kMHeightHighestFieldNumber = 4,
  };
  // uint32 m_number_of_blocks = 1;
  void clear_m_number_of_blocks();
  uint32_t m_number_of_blocks() const;
  void set_m_number_of_blocks(uint32_t value);
  private:
  uint32_t _internal_m_number_of_blocks() const;
  void _internal_set_m_number_of_blocks(uint32_t value);
  public:

  // uint32 m_filesize = 2;
  void clear_m_filesize();
  uint32_t m_filesize() const;
  void set_m_filesize(uint32_t value);
  private:
  uint32_t _internal_m_filesize() const;
  void _internal_set_m_filesize(uint32_t value);
  public:

  // uint32 m_height_lowest = 3;
  void clear_m_height_lowest();
  uint32_t m_height_lowest() const;
  void set_m_height_lowest(uint32_t value);
  private:
  uint32_t _internal_m_height_lowest() const;
  void _internal_set_m_height_lowest(uint32_t value);
  public:

  // uint32 m_height_highest = 4;
  void clear_m_height_highest();
  uint32_t m_height_highest() const;
  void set_m_height_highest(uint32_t value);
  private:
  uint32_t _internal_m_height_highest() const;
  void _internal_set_m_height_highest(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.file_info_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t m_number_of_blocks_;
  uint32_t m_filesize_;
  uint32_t m_height_lowest_;
  uint32_t m_height_highest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class transaction_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.transaction_record) */ {
 public:
  inline transaction_record() : transaction_record(nullptr) {}
  ~transaction_record() override;
  explicit constexpr transaction_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_record(const transaction_record& from);
  transaction_record(transaction_record&& from) noexcept
    : transaction_record() {
    *this = ::std::move(from);
  }

  inline transaction_record& operator=(const transaction_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_record& operator=(transaction_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_record* internal_default_instance() {
    return reinterpret_cast<const transaction_record*>(
               &_transaction_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transaction_record& a, transaction_record& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.transaction_record";
  }
  protected:
  explicit transaction_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFileContainsBlockFieldNumber = 1,
    kMBlockidFieldNumber = 4,
    kMOffsetOfBlockFieldNumber = 2,
    kMOffsetOfTransactionFieldNumber = 3,
  };
  // string m_file_contains_block = 1;
  void clear_m_file_contains_block();
  const std::string& m_file_contains_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_file_contains_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_file_contains_block();
  PROTOBUF_NODISCARD std::string* release_m_file_contains_block();
  void set_allocated_m_file_contains_block(std::string* m_file_contains_block);
  private:
  const std::string& _internal_m_file_contains_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_file_contains_block(const std::string& value);
  std::string* _internal_mutable_m_file_contains_block();
  public:

  // bytes m_blockid = 4;
  void clear_m_blockid();
  const std::string& m_blockid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_blockid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_blockid();
  PROTOBUF_NODISCARD std::string* release_m_blockid();
  void set_allocated_m_blockid(std::string* m_blockid);
  private:
  const std::string& _internal_m_blockid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_blockid(const std::string& value);
  std::string* _internal_mutable_m_blockid();
  public:

  // uint32 m_offset_of_block = 2;
  void clear_m_offset_of_block();
  uint32_t m_offset_of_block() const;
  void set_m_offset_of_block(uint32_t value);
  private:
  uint32_t _internal_m_offset_of_block() const;
  void _internal_set_m_offset_of_block(uint32_t value);
  public:

  // uint32 m_offset_of_transaction = 3;
  void clear_m_offset_of_transaction();
  uint32_t m_offset_of_transaction() const;
  void set_m_offset_of_transaction(uint32_t value);
  private:
  uint32_t _internal_m_offset_of_transaction() const;
  void _internal_set_m_offset_of_transaction(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.transaction_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_file_contains_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_blockid_;
  uint32_t m_offset_of_block_;
  uint32_t m_offset_of_transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// block_record

// .proto.header m_header = 1;
inline bool block_record::_internal_has_m_header() const {
  return this != internal_default_instance() && m_header_ != nullptr;
}
inline bool block_record::has_m_header() const {
  return _internal_has_m_header();
}
inline const ::proto::header& block_record::_internal_m_header() const {
  const ::proto::header* p = m_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::header&>(
      ::proto::_header_default_instance_);
}
inline const ::proto::header& block_record::m_header() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_header)
  return _internal_m_header();
}
inline void block_record::unsafe_arena_set_allocated_m_header(
    ::proto::header* m_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_header_);
  }
  m_header_ = m_header;
  if (m_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.block_record.m_header)
}
inline ::proto::header* block_record::release_m_header() {
  
  ::proto::header* temp = m_header_;
  m_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::header* block_record::unsafe_arena_release_m_header() {
  // @@protoc_insertion_point(field_release:proto.block_record.m_header)
  
  ::proto::header* temp = m_header_;
  m_header_ = nullptr;
  return temp;
}
inline ::proto::header* block_record::_internal_mutable_m_header() {
  
  if (m_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::header>(GetArenaForAllocation());
    m_header_ = p;
  }
  return m_header_;
}
inline ::proto::header* block_record::mutable_m_header() {
  ::proto::header* _msg = _internal_mutable_m_header();
  // @@protoc_insertion_point(field_mutable:proto.block_record.m_header)
  return _msg;
}
inline void block_record::set_allocated_m_header(::proto::header* m_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_header_);
  }
  if (m_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_header));
    if (message_arena != submessage_arena) {
      m_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_header, submessage_arena);
    }
    
  } else {
    
  }
  m_header_ = m_header;
  // @@protoc_insertion_point(field_set_allocated:proto.block_record.m_header)
}

// uint32 m_height = 2;
inline void block_record::clear_m_height() {
  m_height_ = 0u;
}
inline uint32_t block_record::_internal_m_height() const {
  return m_height_;
}
inline uint32_t block_record::m_height() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_height)
  return _internal_m_height();
}
inline void block_record::_internal_set_m_height(uint32_t value) {
  
  m_height_ = value;
}
inline void block_record::set_m_height(uint32_t value) {
  _internal_set_m_height(value);
  // @@protoc_insertion_point(field_set:proto.block_record.m_height)
}

// uint32 m_number_of_transactions = 3;
inline void block_record::clear_m_number_of_transactions() {
  m_number_of_transactions_ = 0u;
}
inline uint32_t block_record::_internal_m_number_of_transactions() const {
  return m_number_of_transactions_;
}
inline uint32_t block_record::m_number_of_transactions() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_number_of_transactions)
  return _internal_m_number_of_transactions();
}
inline void block_record::_internal_set_m_number_of_transactions(uint32_t value) {
  
  m_number_of_transactions_ = value;
}
inline void block_record::set_m_number_of_transactions(uint32_t value) {
  _internal_set_m_number_of_transactions(value);
  // @@protoc_insertion_point(field_set:proto.block_record.m_number_of_transactions)
}

// string m_file_contains_block = 4;
inline void block_record::clear_m_file_contains_block() {
  m_file_contains_block_.ClearToEmpty();
}
inline const std::string& block_record::m_file_contains_block() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_file_contains_block)
  return _internal_m_file_contains_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_record::set_m_file_contains_block(ArgT0&& arg0, ArgT... args) {
 
 m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.block_record.m_file_contains_block)
}
inline std::string* block_record::mutable_m_file_contains_block() {
  std::string* _s = _internal_mutable_m_file_contains_block();
  // @@protoc_insertion_point(field_mutable:proto.block_record.m_file_contains_block)
  return _s;
}
inline const std::string& block_record::_internal_m_file_contains_block() const {
  return m_file_contains_block_.Get();
}
inline void block_record::_internal_set_m_file_contains_block(const std::string& value) {
  
  m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_record::_internal_mutable_m_file_contains_block() {
  
  return m_file_contains_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_record::release_m_file_contains_block() {
  // @@protoc_insertion_point(field_release:proto.block_record.m_file_contains_block)
  return m_file_contains_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_record::set_allocated_m_file_contains_block(std::string* m_file_contains_block) {
  if (m_file_contains_block != nullptr) {
    
  } else {
    
  }
  m_file_contains_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_file_contains_block,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (m_file_contains_block_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.block_record.m_file_contains_block)
}

// sint32 m_position_in_file = 5;
inline void block_record::clear_m_position_in_file() {
  m_position_in_file_ = 0;
}
inline int32_t block_record::_internal_m_position_in_file() const {
  return m_position_in_file_;
}
inline int32_t block_record::m_position_in_file() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_position_in_file)
  return _internal_m_position_in_file();
}
inline void block_record::_internal_set_m_position_in_file(int32_t value) {
  
  m_position_in_file_ = value;
}
inline void block_record::set_m_position_in_file(int32_t value) {
  _internal_set_m_position_in_file(value);
  // @@protoc_insertion_point(field_set:proto.block_record.m_position_in_file)
}

// uint32 m_size_of_binary_data = 6;
inline void block_record::clear_m_size_of_binary_data() {
  m_size_of_binary_data_ = 0u;
}
inline uint32_t block_record::_internal_m_size_of_binary_data() const {
  return m_size_of_binary_data_;
}
inline uint32_t block_record::m_size_of_binary_data() const {
  // @@protoc_insertion_point(field_get:proto.block_record.m_size_of_binary_data)
  return _internal_m_size_of_binary_data();
}
inline void block_record::_internal_set_m_size_of_binary_data(uint32_t value) {
  
  m_size_of_binary_data_ = value;
}
inline void block_record::set_m_size_of_binary_data(uint32_t value) {
  _internal_set_m_size_of_binary_data(value);
  // @@protoc_insertion_point(field_set:proto.block_record.m_size_of_binary_data)
}

// -------------------------------------------------------------------

// file_info_record

// uint32 m_number_of_blocks = 1;
inline void file_info_record::clear_m_number_of_blocks() {
  m_number_of_blocks_ = 0u;
}
inline uint32_t file_info_record::_internal_m_number_of_blocks() const {
  return m_number_of_blocks_;
}
inline uint32_t file_info_record::m_number_of_blocks() const {
  // @@protoc_insertion_point(field_get:proto.file_info_record.m_number_of_blocks)
  return _internal_m_number_of_blocks();
}
inline void file_info_record::_internal_set_m_number_of_blocks(uint32_t value) {
  
  m_number_of_blocks_ = value;
}
inline void file_info_record::set_m_number_of_blocks(uint32_t value) {
  _internal_set_m_number_of_blocks(value);
  // @@protoc_insertion_point(field_set:proto.file_info_record.m_number_of_blocks)
}

// uint32 m_filesize = 2;
inline void file_info_record::clear_m_filesize() {
  m_filesize_ = 0u;
}
inline uint32_t file_info_record::_internal_m_filesize() const {
  return m_filesize_;
}
inline uint32_t file_info_record::m_filesize() const {
  // @@protoc_insertion_point(field_get:proto.file_info_record.m_filesize)
  return _internal_m_filesize();
}
inline void file_info_record::_internal_set_m_filesize(uint32_t value) {
  
  m_filesize_ = value;
}
inline void file_info_record::set_m_filesize(uint32_t value) {
  _internal_set_m_filesize(value);
  // @@protoc_insertion_point(field_set:proto.file_info_record.m_filesize)
}

// uint32 m_height_lowest = 3;
inline void file_info_record::clear_m_height_lowest() {
  m_height_lowest_ = 0u;
}
inline uint32_t file_info_record::_internal_m_height_lowest() const {
  return m_height_lowest_;
}
inline uint32_t file_info_record::m_height_lowest() const {
  // @@protoc_insertion_point(field_get:proto.file_info_record.m_height_lowest)
  return _internal_m_height_lowest();
}
inline void file_info_record::_internal_set_m_height_lowest(uint32_t value) {
  
  m_height_lowest_ = value;
}
inline void file_info_record::set_m_height_lowest(uint32_t value) {
  _internal_set_m_height_lowest(value);
  // @@protoc_insertion_point(field_set:proto.file_info_record.m_height_lowest)
}

// uint32 m_height_highest = 4;
inline void file_info_record::clear_m_height_highest() {
  m_height_highest_ = 0u;
}
inline uint32_t file_info_record::_internal_m_height_highest() const {
  return m_height_highest_;
}
inline uint32_t file_info_record::m_height_highest() const {
  // @@protoc_insertion_point(field_get:proto.file_info_record.m_height_highest)
  return _internal_m_height_highest();
}
inline void file_info_record::_internal_set_m_height_highest(uint32_t value) {
  
  m_height_highest_ = value;
}
inline void file_info_record::set_m_height_highest(uint32_t value) {
  _internal_set_m_height_highest(value);
  // @@protoc_insertion_point(field_set:proto.file_info_record.m_height_highest)
}

// -------------------------------------------------------------------

// transaction_record

// string m_file_contains_block = 1;
inline void transaction_record::clear_m_file_contains_block() {
  m_file_contains_block_.ClearToEmpty();
}
inline const std::string& transaction_record::m_file_contains_block() const {
  // @@protoc_insertion_point(field_get:proto.transaction_record.m_file_contains_block)
  return _internal_m_file_contains_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_record::set_m_file_contains_block(ArgT0&& arg0, ArgT... args) {
 
 m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.transaction_record.m_file_contains_block)
}
inline std::string* transaction_record::mutable_m_file_contains_block() {
  std::string* _s = _internal_mutable_m_file_contains_block();
  // @@protoc_insertion_point(field_mutable:proto.transaction_record.m_file_contains_block)
  return _s;
}
inline const std::string& transaction_record::_internal_m_file_contains_block() const {
  return m_file_contains_block_.Get();
}
inline void transaction_record::_internal_set_m_file_contains_block(const std::string& value) {
  
  m_file_contains_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_record::_internal_mutable_m_file_contains_block() {
  
  return m_file_contains_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_record::release_m_file_contains_block() {
  // @@protoc_insertion_point(field_release:proto.transaction_record.m_file_contains_block)
  return m_file_contains_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_record::set_allocated_m_file_contains_block(std::string* m_file_contains_block) {
  if (m_file_contains_block != nullptr) {
    
  } else {
    
  }
  m_file_contains_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_file_contains_block,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (m_file_contains_block_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    m_file_contains_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.transaction_record.m_file_contains_block)
}

// uint32 m_offset_of_block = 2;
inline void transaction_record::clear_m_offset_of_block() {
  m_offset_of_block_ = 0u;
}
inline uint32_t transaction_record::_internal_m_offset_of_block() const {
  return m_offset_of_block_;
}
inline uint32_t transaction_record::m_offset_of_block() const {
  // @@protoc_insertion_point(field_get:proto.transaction_record.m_offset_of_block)
  return _internal_m_offset_of_block();
}
inline void transaction_record::_internal_set_m_offset_of_block(uint32_t value) {
  
  m_offset_of_block_ = value;
}
inline void transaction_record::set_m_offset_of_block(uint32_t value) {
  _internal_set_m_offset_of_block(value);
  // @@protoc_insertion_point(field_set:proto.transaction_record.m_offset_of_block)
}

// uint32 m_offset_of_transaction = 3;
inline void transaction_record::clear_m_offset_of_transaction() {
  m_offset_of_transaction_ = 0u;
}
inline uint32_t transaction_record::_internal_m_offset_of_transaction() const {
  return m_offset_of_transaction_;
}
inline uint32_t transaction_record::m_offset_of_transaction() const {
  // @@protoc_insertion_point(field_get:proto.transaction_record.m_offset_of_transaction)
  return _internal_m_offset_of_transaction();
}
inline void transaction_record::_internal_set_m_offset_of_transaction(uint32_t value) {
  
  m_offset_of_transaction_ = value;
}
inline void transaction_record::set_m_offset_of_transaction(uint32_t value) {
  _internal_set_m_offset_of_transaction(value);
  // @@protoc_insertion_point(field_set:proto.transaction_record.m_offset_of_transaction)
}

// bytes m_blockid = 4;
inline void transaction_record::clear_m_blockid() {
  m_blockid_.ClearToEmpty();
}
inline const std::string& transaction_record::m_blockid() const {
  // @@protoc_insertion_point(field_get:proto.transaction_record.m_blockid)
  return _internal_m_blockid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_record::set_m_blockid(ArgT0&& arg0, ArgT... args) {
 
 m_blockid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.transaction_record.m_blockid)
}
inline std::string* transaction_record::mutable_m_blockid() {
  std::string* _s = _internal_mutable_m_blockid();
  // @@protoc_insertion_point(field_mutable:proto.transaction_record.m_blockid)
  return _s;
}
inline const std::string& transaction_record::_internal_m_blockid() const {
  return m_blockid_.Get();
}
inline void transaction_record::_internal_set_m_blockid(const std::string& value) {
  
  m_blockid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_record::_internal_mutable_m_blockid() {
  
  return m_blockid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_record::release_m_blockid() {
  // @@protoc_insertion_point(field_release:proto.transaction_record.m_blockid)
  return m_blockid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_record::set_allocated_m_blockid(std::string* m_blockid) {
  if (m_blockid != nullptr) {
    
  } else {
    
  }
  m_blockid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_blockid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (m_blockid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    m_blockid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.transaction_record.m_blockid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
