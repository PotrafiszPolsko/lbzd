// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#include "p2p.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr transaction_vin::transaction_vin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_pk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct transaction_vinDefaultTypeInternal {
  constexpr transaction_vinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_vinDefaultTypeInternal() {}
  union {
    transaction_vin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_vinDefaultTypeInternal _transaction_vin_default_instance_;
constexpr transaction_vout::transaction_vout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_pkh_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_amount_(0u){}
struct transaction_voutDefaultTypeInternal {
  constexpr transaction_voutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_voutDefaultTypeInternal() {}
  union {
    transaction_vout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_voutDefaultTypeInternal _transaction_vout_default_instance_;
constexpr transaction::transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_vin_()
  , m_vout_()
  , m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_allmetadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_type_(0)
{}
struct transactionDefaultTypeInternal {
  constexpr transactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transactionDefaultTypeInternal() {}
  union {
    transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transactionDefaultTypeInternal _transaction_default_instance_;
constexpr header::header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_all_signatures_()
  , m_parent_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_actual_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_all_tx_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_version_(0u)
  , m_block_time_(0u){}
struct headerDefaultTypeInternal {
  constexpr headerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~headerDefaultTypeInternal() {}
  union {
    header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT headerDefaultTypeInternal _header_default_instance_;
constexpr headers::headers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_headers_(){}
struct headersDefaultTypeInternal {
  constexpr headersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~headersDefaultTypeInternal() {}
  union {
    headers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT headersDefaultTypeInternal _headers_default_instance_;
constexpr block::block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_transaction_()
  , m_header_(nullptr){}
struct blockDefaultTypeInternal {
  constexpr blockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~blockDefaultTypeInternal() {}
  union {
    block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT blockDefaultTypeInternal _block_default_instance_;
constexpr addr_peer_details::addr_peer_details(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_timestamp_(uint64_t{0u})
  , m_port_(0u){}
struct addr_peer_detailsDefaultTypeInternal {
  constexpr addr_peer_detailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addr_peer_detailsDefaultTypeInternal() {}
  union {
    addr_peer_details _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addr_peer_detailsDefaultTypeInternal _addr_peer_details_default_instance_;
constexpr addr::addr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_peer_list_(){}
struct addrDefaultTypeInternal {
  constexpr addrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addrDefaultTypeInternal() {}
  union {
    addr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addrDefaultTypeInternal _addr_default_instance_;
constexpr all_active_votings_for_voter::all_active_votings_for_voter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_voting_ids_(){}
struct all_active_votings_for_voterDefaultTypeInternal {
  constexpr all_active_votings_for_voterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~all_active_votings_for_voterDefaultTypeInternal() {}
  union {
    all_active_votings_for_voter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT all_active_votings_for_voterDefaultTypeInternal _all_active_votings_for_voter_default_instance_;
constexpr getheaders::getheaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_hash_header_start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_hash_header_stop_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_version_(0u){}
struct getheadersDefaultTypeInternal {
  constexpr getheadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getheadersDefaultTypeInternal() {}
  union {
    getheaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getheadersDefaultTypeInternal _getheaders_default_instance_;
constexpr gettxs::gettxs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_hash_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct gettxsDefaultTypeInternal {
  constexpr gettxsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gettxsDefaultTypeInternal() {}
  union {
    gettxs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gettxsDefaultTypeInternal _gettxs_default_instance_;
constexpr getblock::getblock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_hash_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct getblockDefaultTypeInternal {
  constexpr getblockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getblockDefaultTypeInternal() {}
  union {
    getblock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getblockDefaultTypeInternal _getblock_default_instance_;
constexpr getmempooltransactions::getmempooltransactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct getmempooltransactionsDefaultTypeInternal {
  constexpr getmempooltransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getmempooltransactionsDefaultTypeInternal() {}
  union {
    getmempooltransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getmempooltransactionsDefaultTypeInternal _getmempooltransactions_default_instance_;
constexpr getaddr::getaddr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct getaddrDefaultTypeInternal {
  constexpr getaddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getaddrDefaultTypeInternal() {}
  union {
    getaddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getaddrDefaultTypeInternal _getaddr_default_instance_;
constexpr getmerklebranch::getmerklebranch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct getmerklebranchDefaultTypeInternal {
  constexpr getmerklebranchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getmerklebranchDefaultTypeInternal() {}
  union {
    getmerklebranch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getmerklebranchDefaultTypeInternal _getmerklebranch_default_instance_;
constexpr merkle_branch::merkle_branch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_merkle_branch_()
  , m_block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct merkle_branchDefaultTypeInternal {
  constexpr merkle_branchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~merkle_branchDefaultTypeInternal() {}
  union {
    merkle_branch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT merkle_branchDefaultTypeInternal _merkle_branch_default_instance_;
constexpr get_all_active_votings_for_voter::get_all_active_votings_for_voter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_voter_pk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_all_active_votings_for_voterDefaultTypeInternal {
  constexpr get_all_active_votings_for_voterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_all_active_votings_for_voterDefaultTypeInternal() {}
  union {
    get_all_active_votings_for_voter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_all_active_votings_for_voterDefaultTypeInternal _get_all_active_votings_for_voter_default_instance_;
constexpr get_amount_on_pkh::get_amount_on_pkh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_pkh_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_amount_on_pkhDefaultTypeInternal {
  constexpr get_amount_on_pkhDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_amount_on_pkhDefaultTypeInternal() {}
  union {
    get_amount_on_pkh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_amount_on_pkhDefaultTypeInternal _get_amount_on_pkh_default_instance_;
constexpr amount_on_pkh::amount_on_pkh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_amount_(0u){}
struct amount_on_pkhDefaultTypeInternal {
  constexpr amount_on_pkhDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~amount_on_pkhDefaultTypeInternal() {}
  union {
    amount_on_pkh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT amount_on_pkhDefaultTypeInternal _amount_on_pkh_default_instance_;
constexpr get_transaction::get_transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_transactionDefaultTypeInternal {
  constexpr get_transactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transactionDefaultTypeInternal() {}
  union {
    get_transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transactionDefaultTypeInternal _get_transaction_default_instance_;
constexpr get_authorization_txid::get_authorization_txid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_pk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m_voting_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_authorization_txidDefaultTypeInternal {
  constexpr get_authorization_txidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_authorization_txidDefaultTypeInternal() {}
  union {
    get_authorization_txid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_authorization_txidDefaultTypeInternal _get_authorization_txid_default_instance_;
constexpr authorization_txid::authorization_txid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct authorization_txidDefaultTypeInternal {
  constexpr authorization_txidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~authorization_txidDefaultTypeInternal() {}
  union {
    authorization_txid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT authorization_txidDefaultTypeInternal _authorization_txid_default_instance_;
constexpr get_all_finished_votings_for_voter::get_all_finished_votings_for_voter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_voter_pk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_all_finished_votings_for_voterDefaultTypeInternal {
  constexpr get_all_finished_votings_for_voterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_all_finished_votings_for_voterDefaultTypeInternal() {}
  union {
    get_all_finished_votings_for_voter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_all_finished_votings_for_voterDefaultTypeInternal _get_all_finished_votings_for_voter_default_instance_;
constexpr all_finished_votings_for_voter::all_finished_votings_for_voter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m_voting_ids_(){}
struct all_finished_votings_for_voterDefaultTypeInternal {
  constexpr all_finished_votings_for_voterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~all_finished_votings_for_voterDefaultTypeInternal() {}
  union {
    all_finished_votings_for_voter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT all_finished_votings_for_voterDefaultTypeInternal _all_finished_votings_for_voter_default_instance_;
constexpr request::request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct requestDefaultTypeInternal {
  constexpr requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~requestDefaultTypeInternal() {}
  union {
    request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT requestDefaultTypeInternal _request_default_instance_;
constexpr proto_massage::proto_massage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct proto_massageDefaultTypeInternal {
  constexpr proto_massageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~proto_massageDefaultTypeInternal() {}
  union {
    proto_massage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT proto_massageDefaultTypeInternal _proto_massage_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p2p_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_p2p_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p2p_2eproto = nullptr;

const uint32_t TableStruct_p2p_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vin, m_txid_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vin, m_sign_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vin, m_pk_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vout, m_pkh_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction_vout, m_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::transaction, m_type_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction, m_vin_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction, m_vout_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction, m_txid_),
  PROTOBUF_FIELD_OFFSET(::proto::transaction, m_allmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::header, m_version_),
  PROTOBUF_FIELD_OFFSET(::proto::header, m_parent_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::header, m_actual_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::header, m_block_time_),
  PROTOBUF_FIELD_OFFSET(::proto::header, m_all_tx_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::header, m_all_signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::headers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::headers, m_headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::block, m_header_),
  PROTOBUF_FIELD_OFFSET(::proto::block, m_transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::addr_peer_details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::addr_peer_details, m_address_),
  PROTOBUF_FIELD_OFFSET(::proto::addr_peer_details, m_port_),
  PROTOBUF_FIELD_OFFSET(::proto::addr_peer_details, m_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::addr, m_peer_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::all_active_votings_for_voter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::all_active_votings_for_voter, m_voting_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::getheaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::getheaders, m_version_),
  PROTOBUF_FIELD_OFFSET(::proto::getheaders, m_hash_header_start_),
  PROTOBUF_FIELD_OFFSET(::proto::getheaders, m_hash_header_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::gettxs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::gettxs, m_hash_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::getblock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::getblock, m_hash_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::getmempooltransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::getaddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::getmerklebranch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::getmerklebranch, m_txid_),
  PROTOBUF_FIELD_OFFSET(::proto::merkle_branch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::merkle_branch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::merkle_branch, m_merkle_branch_),
  PROTOBUF_FIELD_OFFSET(::proto::merkle_branch, m_block_id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::get_all_active_votings_for_voter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::get_all_active_votings_for_voter, m_voter_pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::get_amount_on_pkh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::get_amount_on_pkh, m_pkh_),
  PROTOBUF_FIELD_OFFSET(::proto::amount_on_pkh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::amount_on_pkh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::amount_on_pkh, m_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::amount_on_pkh, m_txid_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::get_transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::get_transaction, m_txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::get_authorization_txid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::get_authorization_txid, m_pk_),
  PROTOBUF_FIELD_OFFSET(::proto::get_authorization_txid, m_voting_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::authorization_txid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::authorization_txid, m_txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::get_all_finished_votings_for_voter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::get_all_finished_votings_for_voter, m_voter_pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::all_finished_votings_for_voter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::all_finished_votings_for_voter, m_voting_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::request, request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::proto_massage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::proto_massage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::proto_massage, message_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::proto::transaction_vin)},
  { 12, -1, -1, sizeof(::proto::transaction_vout)},
  { 20, -1, -1, sizeof(::proto::transaction)},
  { 31, -1, -1, sizeof(::proto::header)},
  { 43, -1, -1, sizeof(::proto::headers)},
  { 50, -1, -1, sizeof(::proto::block)},
  { 58, -1, -1, sizeof(::proto::addr_peer_details)},
  { 67, -1, -1, sizeof(::proto::addr)},
  { 74, -1, -1, sizeof(::proto::all_active_votings_for_voter)},
  { 81, -1, -1, sizeof(::proto::getheaders)},
  { 90, -1, -1, sizeof(::proto::gettxs)},
  { 97, -1, -1, sizeof(::proto::getblock)},
  { 104, -1, -1, sizeof(::proto::getmempooltransactions)},
  { 110, -1, -1, sizeof(::proto::getaddr)},
  { 116, -1, -1, sizeof(::proto::getmerklebranch)},
  { 123, 131, -1, sizeof(::proto::merkle_branch)},
  { 133, -1, -1, sizeof(::proto::get_all_active_votings_for_voter)},
  { 140, -1, -1, sizeof(::proto::get_amount_on_pkh)},
  { 147, 155, -1, sizeof(::proto::amount_on_pkh)},
  { 157, -1, -1, sizeof(::proto::get_transaction)},
  { 164, -1, -1, sizeof(::proto::get_authorization_txid)},
  { 172, -1, -1, sizeof(::proto::authorization_txid)},
  { 179, -1, -1, sizeof(::proto::get_all_finished_votings_for_voter)},
  { 186, -1, -1, sizeof(::proto::all_finished_votings_for_voter)},
  { 193, -1, -1, sizeof(::proto::request)},
  { 211, -1, -1, sizeof(::proto::proto_massage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_transaction_vin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_transaction_vout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_headers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_addr_peer_details_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_addr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_all_active_votings_for_voter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_getheaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_gettxs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_getblock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_getmempooltransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_getaddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_getmerklebranch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_merkle_branch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_get_all_active_votings_for_voter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_get_amount_on_pkh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_amount_on_pkh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_get_transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_get_authorization_txid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_authorization_txid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_get_all_finished_votings_for_voter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_all_finished_votings_for_voter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_proto_massage_default_instance_),
};

const char descriptor_table_protodef_p2p_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tp2p.proto\022\005proto\"\240\004\n\013transaction\0222\n\006m_"
  "type\030\001 \001(\0162\".proto.transaction.transacti"
  "ontype\022%\n\005m_vin\030\002 \003(\0132\026.proto.transactio"
  "n.vin\022\'\n\006m_vout\030\003 \003(\0132\027.proto.transactio"
  "n.vout\022\016\n\006m_txid\030\004 \001(\014\022\025\n\rm_allmetadata\030"
  "\005 \001(\014\032C\n\003vin\022\016\n\006m_txid\030\001 \001(\014\022\023\n\006m_sign\030\002"
  " \001(\014H\000\210\001\001\022\014\n\004m_pk\030\003 \001(\014B\t\n\007_m_sign\032\'\n\004vo"
  "ut\022\r\n\005m_pkh\030\001 \001(\014\022\020\n\010m_amount\030\002 \001(\007\"\367\001\n\017"
  "transactiontype\022\023\n\017add_secret_vote\020\000\022\021\n\r"
  "add_open_vote\020\001\022\014\n\010generate\020\002\022\023\n\017authori"
  "ze_miner\020\003\022\027\n\023authorize_organizer\020\004\022\024\n\020a"
  "uthorize_issuer\020\005\022\023\n\017authorize_voter\020\006\022\021"
  "\n\rcreate_voting\020\007\022\r\n\tcoin_join\020\010\022\033\n\027anot"
  "her_voting_protocol\020\t\022\026\n\022hash_personal_d"
  "ata\020\n\"\220\001\n\006header\022\021\n\tm_version\030\001 \001(\007\022\025\n\rm"
  "_parent_hash\030\002 \001(\014\022\025\n\rm_actual_hash\030\003 \001("
  "\014\022\024\n\014m_block_time\030\004 \001(\007\022\025\n\rm_all_tx_hash"
  "\030\005 \001(\014\022\030\n\020m_all_signatures\030\006 \003(\014\"+\n\007head"
  "ers\022 \n\tm_headers\030\001 \003(\0132\r.proto.header\"S\n"
  "\005block\022\037\n\010m_header\030\001 \001(\0132\r.proto.header\022"
  ")\n\rm_transaction\030\002 \003(\0132\022.proto.transacti"
  "on\"}\n\004addr\022-\n\013m_peer_list\030\001 \003(\0132\030.proto."
  "addr.peer_details\032F\n\014peer_details\022\021\n\tm_a"
  "ddress\030\001 \001(\t\022\016\n\006m_port\030\002 \001(\r\022\023\n\013m_timest"
  "amp\030\003 \001(\004\"4\n\034all_active_votings_for_vote"
  "r\022\024\n\014m_voting_ids\030\001 \003(\014\"X\n\ngetheaders\022\021\n"
  "\tm_version\030\001 \001(\007\022\033\n\023m_hash_header_start\030"
  "\002 \001(\014\022\032\n\022m_hash_header_stop\030\003 \001(\014\"\037\n\006get"
  "txs\022\025\n\rm_hash_header\030\001 \001(\014\"!\n\010getblock\022\025"
  "\n\rm_hash_header\030\001 \001(\014\"\030\n\026getmempooltrans"
  "actions\"\t\n\007getaddr\"!\n\017getmerklebranch\022\016\n"
  "\006m_txid\030\001 \001(\014\"P\n\rmerkle_branch\022\027\n\017m_merk"
  "le_branch\030\001 \003(\014\022\027\n\nm_block_id\030\002 \001(\014H\000\210\001\001"
  "B\r\n\013_m_block_id\"6\n get_all_active_voting"
  "s_for_voter\022\022\n\nm_voter_pk\030\001 \001(\014\"\"\n\021get_a"
  "mount_on_pkh\022\r\n\005m_pkh\030\001 \001(\014\"A\n\ramount_on"
  "_pkh\022\020\n\010m_amount\030\001 \001(\r\022\023\n\006m_txid\030\002 \001(\014H\000"
  "\210\001\001B\t\n\007_m_txid\"!\n\017get_transaction\022\016\n\006m_t"
  "xid\030\001 \001(\014\";\n\026get_authorization_txid\022\014\n\004m"
  "_pk\030\001 \001(\014\022\023\n\013m_voting_id\030\002 \001(\014\"$\n\022author"
  "ization_txid\022\016\n\006m_txid\030\001 \001(\014\"8\n\"get_all_"
  "finished_votings_for_voter\022\022\n\nm_voter_pk"
  "\030\001 \001(\014\"6\n\036all_finished_votings_for_voter"
  "\022\024\n\014m_voting_ids\030\001 \003(\014\"\216\005\n\007request\022)\n\014m_"
  "getheaders\030\001 \001(\0132\021.proto.getheadersH\000\022!\n"
  "\010m_gettxs\030\002 \001(\0132\r.proto.gettxsH\000\022%\n\nm_ge"
  "tblock\030\003 \001(\0132\017.proto.getblockH\000\022A\n\030m_get"
  "mempooltransactions\030\004 \001(\0132\035.proto.getmem"
  "pooltransactionsH\000\022#\n\tm_getaddr\030\005 \001(\0132\016."
  "proto.getaddrH\000\0223\n\021m_getmerklebranch\030\006 \001"
  "(\0132\026.proto.getmerklebranchH\000\022U\n\"m_get_al"
  "l_active_votings_for_voter\030\010 \001(\0132\'.proto"
  ".get_all_active_votings_for_voterH\000\0227\n\023m"
  "_get_amount_on_pkh\030\t \001(\0132\030.proto.get_amo"
  "unt_on_pkhH\000\0223\n\021m_get_transaction\030\n \001(\0132"
  "\026.proto.get_transactionH\000\022A\n\030m_get_autho"
  "rization_txid\030\013 \001(\0132\035.proto.get_authoriz"
  "ation_txidH\000\022Y\n$m_get_all_finished_votin"
  "gs_for_voter\030\014 \001(\0132).proto.get_all_finis"
  "hed_votings_for_voterH\000B\016\n\014request_type\""
  "\225\004\n\rproto_massage\022#\n\tm_request\030\001 \001(\0132\016.p"
  "roto.requestH\000\022#\n\tm_headers\030\002 \001(\0132\016.prot"
  "o.headersH\000\022\037\n\007m_block\030\003 \001(\0132\014.proto.blo"
  "ckH\000\022+\n\rm_transaction\030\004 \001(\0132\022.proto.tran"
  "sactionH\000\022\035\n\006m_addr\030\005 \001(\0132\013.proto.addrH\000"
  "\022/\n\017m_merkle_branch\030\007 \001(\0132\024.proto.merkle"
  "_branchH\000\022M\n\036m_all_active_votings_for_vo"
  "ter\030\010 \001(\0132#.proto.all_active_votings_for"
  "_voterH\000\022/\n\017m_amount_on_pkh\030\t \001(\0132\024.prot"
  "o.amount_on_pkhH\000\0229\n\024m_authorization_txi"
  "d\030\n \001(\0132\031.proto.authorization_txidH\000\022Q\n "
  "m_all_finished_votings_for_voter\030\013 \001(\0132%"
  ".proto.all_finished_votings_for_voterH\000B"
  "\016\n\014message_typeb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p2p_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2p_2eproto = {
  false, false, 2943, descriptor_table_protodef_p2p_2eproto, "p2p.proto", 
  &descriptor_table_p2p_2eproto_once, nullptr, 0, 26,
  schemas, file_default_instances, TableStruct_p2p_2eproto::offsets,
  file_level_metadata_p2p_2eproto, file_level_enum_descriptors_p2p_2eproto, file_level_service_descriptors_p2p_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p2p_2eproto_getter() {
  return &descriptor_table_p2p_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p2p_2eproto(&descriptor_table_p2p_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transaction_transactiontype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2p_2eproto);
  return file_level_enum_descriptors_p2p_2eproto[0];
}
bool transaction_transactiontype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr transaction_transactiontype transaction::add_secret_vote;
constexpr transaction_transactiontype transaction::add_open_vote;
constexpr transaction_transactiontype transaction::generate;
constexpr transaction_transactiontype transaction::authorize_miner;
constexpr transaction_transactiontype transaction::authorize_organizer;
constexpr transaction_transactiontype transaction::authorize_issuer;
constexpr transaction_transactiontype transaction::authorize_voter;
constexpr transaction_transactiontype transaction::create_voting;
constexpr transaction_transactiontype transaction::coin_join;
constexpr transaction_transactiontype transaction::another_voting_protocol;
constexpr transaction_transactiontype transaction::hash_personal_data;
constexpr transaction_transactiontype transaction::transactiontype_MIN;
constexpr transaction_transactiontype transaction::transactiontype_MAX;
constexpr int transaction::transactiontype_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class transaction_vin::_Internal {
 public:
  using HasBits = decltype(std::declval<transaction_vin>()._has_bits_);
  static void set_has_m_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

transaction_vin::transaction_vin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.transaction.vin)
}
transaction_vin::transaction_vin(const transaction_vin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_txid().empty()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  m_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_sign()) {
    m_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_sign(), 
      GetArenaForAllocation());
  }
  m_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pk().empty()) {
    m_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_pk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.transaction.vin)
}

inline void transaction_vin::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

transaction_vin::~transaction_vin() {
  // @@protoc_insertion_point(destructor:proto.transaction.vin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_vin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_vin::ArenaDtor(void* object) {
  transaction_vin* _this = reinterpret_cast< transaction_vin* >(object);
  (void)_this;
}
void transaction_vin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_vin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_vin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.transaction.vin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_txid_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_sign_.ClearNonDefaultToEmpty();
  }
  m_pk_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_vin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes m_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_vin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.transaction.vin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_txid(), target);
  }

  // optional bytes m_sign = 2;
  if (_internal_has_m_sign()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_sign(), target);
  }

  // bytes m_pk = 3;
  if (!this->_internal_m_pk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_m_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.transaction.vin)
  return target;
}

size_t transaction_vin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.transaction.vin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  // optional bytes m_sign = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_sign());
  }

  // bytes m_pk = 3;
  if (!this->_internal_m_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_vin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_vin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_vin::GetClassData() const { return &_class_data_; }

void transaction_vin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_vin *>(to)->MergeFrom(
      static_cast<const transaction_vin &>(from));
}


void transaction_vin::MergeFrom(const transaction_vin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.transaction.vin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_txid().empty()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  if (from._internal_has_m_sign()) {
    _internal_set_m_sign(from._internal_m_sign());
  }
  if (!from._internal_m_pk().empty()) {
    _internal_set_m_pk(from._internal_m_pk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_vin::CopyFrom(const transaction_vin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.transaction.vin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_vin::IsInitialized() const {
  return true;
}

void transaction_vin::InternalSwap(transaction_vin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_sign_, lhs_arena,
      &other->m_sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_pk_, lhs_arena,
      &other->m_pk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_vin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[0]);
}

// ===================================================================

class transaction_vout::_Internal {
 public:
};

transaction_vout::transaction_vout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.transaction.vout)
}
transaction_vout::transaction_vout(const transaction_vout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_pkh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_pkh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pkh().empty()) {
    m_pkh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_pkh(), 
      GetArenaForAllocation());
  }
  m_amount_ = from.m_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.transaction.vout)
}

inline void transaction_vout::SharedCtor() {
m_pkh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_pkh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_amount_ = 0u;
}

transaction_vout::~transaction_vout() {
  // @@protoc_insertion_point(destructor:proto.transaction.vout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_vout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_pkh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_vout::ArenaDtor(void* object) {
  transaction_vout* _this = reinterpret_cast< transaction_vout* >(object);
  (void)_this;
}
void transaction_vout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_vout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_vout::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.transaction.vout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_pkh_.ClearToEmpty();
  m_amount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_vout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_pkh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_pkh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 m_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          m_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_vout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.transaction.vout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_pkh = 1;
  if (!this->_internal_m_pkh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_pkh(), target);
  }

  // fixed32 m_amount = 2;
  if (this->_internal_m_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_m_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.transaction.vout)
  return target;
}

size_t transaction_vout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.transaction.vout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_pkh = 1;
  if (!this->_internal_m_pkh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pkh());
  }

  // fixed32 m_amount = 2;
  if (this->_internal_m_amount() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_vout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_vout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_vout::GetClassData() const { return &_class_data_; }

void transaction_vout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_vout *>(to)->MergeFrom(
      static_cast<const transaction_vout &>(from));
}


void transaction_vout::MergeFrom(const transaction_vout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.transaction.vout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_pkh().empty()) {
    _internal_set_m_pkh(from._internal_m_pkh());
  }
  if (from._internal_m_amount() != 0) {
    _internal_set_m_amount(from._internal_m_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_vout::CopyFrom(const transaction_vout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.transaction.vout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_vout::IsInitialized() const {
  return true;
}

void transaction_vout::InternalSwap(transaction_vout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_pkh_, lhs_arena,
      &other->m_pkh_, rhs_arena
  );
  swap(m_amount_, other->m_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_vout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[1]);
}

// ===================================================================

class transaction::_Internal {
 public:
};

transaction::transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_vin_(arena),
  m_vout_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.transaction)
}
transaction::transaction(const transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_vin_(from.m_vin_),
      m_vout_(from.m_vout_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_txid().empty()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  m_allmetadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_allmetadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_allmetadata().empty()) {
    m_allmetadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_allmetadata(), 
      GetArenaForAllocation());
  }
  m_type_ = from.m_type_;
  // @@protoc_insertion_point(copy_constructor:proto.transaction)
}

inline void transaction::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_allmetadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_allmetadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_type_ = 0;
}

transaction::~transaction() {
  // @@protoc_insertion_point(destructor:proto.transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_allmetadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction::ArenaDtor(void* object) {
  transaction* _this = reinterpret_cast< transaction* >(object);
  (void)_this;
}
void transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_vin_.Clear();
  m_vout_.Clear();
  m_txid_.ClearToEmpty();
  m_allmetadata_.ClearToEmpty();
  m_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.transaction.transactiontype m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::proto::transaction_transactiontype>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.transaction.vin m_vin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_vin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.transaction.vout m_vout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_vout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes m_txid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_allmetadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_m_allmetadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.transaction.transactiontype m_type = 1;
  if (this->_internal_m_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // repeated .proto.transaction.vin m_vin = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_vin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_vin(i), target, stream);
  }

  // repeated .proto.transaction.vout m_vout = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_vout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_vout(i), target, stream);
  }

  // bytes m_txid = 4;
  if (!this->_internal_m_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_m_txid(), target);
  }

  // bytes m_allmetadata = 5;
  if (!this->_internal_m_allmetadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_m_allmetadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.transaction)
  return target;
}

size_t transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.transaction.vin m_vin = 2;
  total_size += 1UL * this->_internal_m_vin_size();
  for (const auto& msg : this->m_vin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.transaction.vout m_vout = 3;
  total_size += 1UL * this->_internal_m_vout_size();
  for (const auto& msg : this->m_vout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes m_txid = 4;
  if (!this->_internal_m_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  // bytes m_allmetadata = 5;
  if (!this->_internal_m_allmetadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_allmetadata());
  }

  // .proto.transaction.transactiontype m_type = 1;
  if (this->_internal_m_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction::GetClassData() const { return &_class_data_; }

void transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction *>(to)->MergeFrom(
      static_cast<const transaction &>(from));
}


void transaction::MergeFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_vin_.MergeFrom(from.m_vin_);
  m_vout_.MergeFrom(from.m_vout_);
  if (!from._internal_m_txid().empty()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  if (!from._internal_m_allmetadata().empty()) {
    _internal_set_m_allmetadata(from._internal_m_allmetadata());
  }
  if (from._internal_m_type() != 0) {
    _internal_set_m_type(from._internal_m_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction::CopyFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction::IsInitialized() const {
  return true;
}

void transaction::InternalSwap(transaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_vin_.InternalSwap(&other->m_vin_);
  m_vout_.InternalSwap(&other->m_vout_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_allmetadata_, lhs_arena,
      &other->m_allmetadata_, rhs_arena
  );
  swap(m_type_, other->m_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[2]);
}

// ===================================================================

class header::_Internal {
 public:
};

header::header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_all_signatures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.header)
}
header::header(const header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_all_signatures_(from.m_all_signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_parent_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_parent_hash().empty()) {
    m_parent_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_parent_hash(), 
      GetArenaForAllocation());
  }
  m_actual_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_actual_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_actual_hash().empty()) {
    m_actual_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_actual_hash(), 
      GetArenaForAllocation());
  }
  m_all_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_all_tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_all_tx_hash().empty()) {
    m_all_tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_all_tx_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&m_version_, &from.m_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_block_time_) -
    reinterpret_cast<char*>(&m_version_)) + sizeof(m_block_time_));
  // @@protoc_insertion_point(copy_constructor:proto.header)
}

inline void header::SharedCtor() {
m_parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_parent_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_actual_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_actual_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_all_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_all_tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_block_time_) -
    reinterpret_cast<char*>(&m_version_)) + sizeof(m_block_time_));
}

header::~header() {
  // @@protoc_insertion_point(destructor:proto.header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_parent_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_actual_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_all_tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void header::ArenaDtor(void* object) {
  header* _this = reinterpret_cast< header* >(object);
  (void)_this;
}
void header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void header::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_all_signatures_.Clear();
  m_parent_hash_.ClearToEmpty();
  m_actual_hash_.ClearToEmpty();
  m_all_tx_hash_.ClearToEmpty();
  ::memset(&m_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_block_time_) -
      reinterpret_cast<char*>(&m_version_)) + sizeof(m_block_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed32 m_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          m_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bytes m_parent_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_parent_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_actual_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_actual_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 m_block_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          m_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bytes m_all_tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_m_all_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes m_all_signatures = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_m_all_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 m_version = 1;
  if (this->_internal_m_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_m_version(), target);
  }

  // bytes m_parent_hash = 2;
  if (!this->_internal_m_parent_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_parent_hash(), target);
  }

  // bytes m_actual_hash = 3;
  if (!this->_internal_m_actual_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_m_actual_hash(), target);
  }

  // fixed32 m_block_time = 4;
  if (this->_internal_m_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_m_block_time(), target);
  }

  // bytes m_all_tx_hash = 5;
  if (!this->_internal_m_all_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_m_all_tx_hash(), target);
  }

  // repeated bytes m_all_signatures = 6;
  for (int i = 0, n = this->_internal_m_all_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_m_all_signatures(i);
    target = stream->WriteBytes(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.header)
  return target;
}

size_t header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes m_all_signatures = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(m_all_signatures_.size());
  for (int i = 0, n = m_all_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      m_all_signatures_.Get(i));
  }

  // bytes m_parent_hash = 2;
  if (!this->_internal_m_parent_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_parent_hash());
  }

  // bytes m_actual_hash = 3;
  if (!this->_internal_m_actual_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_actual_hash());
  }

  // bytes m_all_tx_hash = 5;
  if (!this->_internal_m_all_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_all_tx_hash());
  }

  // fixed32 m_version = 1;
  if (this->_internal_m_version() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 m_block_time = 4;
  if (this->_internal_m_block_time() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*header::GetClassData() const { return &_class_data_; }

void header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<header *>(to)->MergeFrom(
      static_cast<const header &>(from));
}


void header::MergeFrom(const header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_all_signatures_.MergeFrom(from.m_all_signatures_);
  if (!from._internal_m_parent_hash().empty()) {
    _internal_set_m_parent_hash(from._internal_m_parent_hash());
  }
  if (!from._internal_m_actual_hash().empty()) {
    _internal_set_m_actual_hash(from._internal_m_actual_hash());
  }
  if (!from._internal_m_all_tx_hash().empty()) {
    _internal_set_m_all_tx_hash(from._internal_m_all_tx_hash());
  }
  if (from._internal_m_version() != 0) {
    _internal_set_m_version(from._internal_m_version());
  }
  if (from._internal_m_block_time() != 0) {
    _internal_set_m_block_time(from._internal_m_block_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void header::CopyFrom(const header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header::IsInitialized() const {
  return true;
}

void header::InternalSwap(header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_all_signatures_.InternalSwap(&other->m_all_signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_parent_hash_, lhs_arena,
      &other->m_parent_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_actual_hash_, lhs_arena,
      &other->m_actual_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_all_tx_hash_, lhs_arena,
      &other->m_all_tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(header, m_block_time_)
      + sizeof(header::m_block_time_)
      - PROTOBUF_FIELD_OFFSET(header, m_version_)>(
          reinterpret_cast<char*>(&m_version_),
          reinterpret_cast<char*>(&other->m_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[3]);
}

// ===================================================================

class headers::_Internal {
 public:
};

headers::headers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.headers)
}
headers::headers(const headers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_headers_(from.m_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.headers)
}

inline void headers::SharedCtor() {
}

headers::~headers() {
  // @@protoc_insertion_point(destructor:proto.headers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void headers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void headers::ArenaDtor(void* object) {
  headers* _this = reinterpret_cast< headers* >(object);
  (void)_this;
}
void headers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void headers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void headers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.headers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* headers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.header m_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* headers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.headers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.header m_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.headers)
  return target;
}

size_t headers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.headers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.header m_headers = 1;
  total_size += 1UL * this->_internal_m_headers_size();
  for (const auto& msg : this->m_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData headers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    headers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*headers::GetClassData() const { return &_class_data_; }

void headers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<headers *>(to)->MergeFrom(
      static_cast<const headers &>(from));
}


void headers::MergeFrom(const headers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.headers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_headers_.MergeFrom(from.m_headers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void headers::CopyFrom(const headers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.headers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headers::IsInitialized() const {
  return true;
}

void headers::InternalSwap(headers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_headers_.InternalSwap(&other->m_headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata headers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[4]);
}

// ===================================================================

class block::_Internal {
 public:
  static const ::proto::header& m_header(const block* msg);
};

const ::proto::header&
block::_Internal::m_header(const block* msg) {
  return *msg->m_header_;
}
block::block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_transaction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.block)
}
block::block(const block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_transaction_(from.m_transaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_header()) {
    m_header_ = new ::proto::header(*from.m_header_);
  } else {
    m_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.block)
}

inline void block::SharedCtor() {
m_header_ = nullptr;
}

block::~block() {
  // @@protoc_insertion_point(destructor:proto.block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete m_header_;
}

void block::ArenaDtor(void* object) {
  block* _this = reinterpret_cast< block* >(object);
  (void)_this;
}
void block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_transaction_.Clear();
  if (GetArenaForAllocation() == nullptr && m_header_ != nullptr) {
    delete m_header_;
  }
  m_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.header m_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.transaction m_transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_transaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.header m_header = 1;
  if (this->_internal_has_m_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_header(this), target, stream);
  }

  // repeated .proto.transaction m_transaction = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_transaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_transaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.block)
  return target;
}

size_t block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.transaction m_transaction = 2;
  total_size += 1UL * this->_internal_m_transaction_size();
  for (const auto& msg : this->m_transaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.header m_header = 1;
  if (this->_internal_has_m_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block::GetClassData() const { return &_class_data_; }

void block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<block *>(to)->MergeFrom(
      static_cast<const block &>(from));
}


void block::MergeFrom(const block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_transaction_.MergeFrom(from.m_transaction_);
  if (from._internal_has_m_header()) {
    _internal_mutable_m_header()->::proto::header::MergeFrom(from._internal_m_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block::CopyFrom(const block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block::IsInitialized() const {
  return true;
}

void block::InternalSwap(block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_transaction_.InternalSwap(&other->m_transaction_);
  swap(m_header_, other->m_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[5]);
}

// ===================================================================

class addr_peer_details::_Internal {
 public:
};

addr_peer_details::addr_peer_details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.addr.peer_details)
}
addr_peer_details::addr_peer_details(const addr_peer_details& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_address().empty()) {
    m_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&m_timestamp_, &from.m_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_port_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_port_));
  // @@protoc_insertion_point(copy_constructor:proto.addr.peer_details)
}

inline void addr_peer_details::SharedCtor() {
m_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_port_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_port_));
}

addr_peer_details::~addr_peer_details() {
  // @@protoc_insertion_point(destructor:proto.addr.peer_details)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addr_peer_details::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void addr_peer_details::ArenaDtor(void* object) {
  addr_peer_details* _this = reinterpret_cast< addr_peer_details* >(object);
  (void)_this;
}
void addr_peer_details::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addr_peer_details::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addr_peer_details::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.addr.peer_details)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_address_.ClearToEmpty();
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_port_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addr_peer_details::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string m_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.addr.peer_details.m_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          m_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 m_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          m_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addr_peer_details::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.addr.peer_details)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_address = 1;
  if (!this->_internal_m_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_address().data(), static_cast<int>(this->_internal_m_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.addr.peer_details.m_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_address(), target);
  }

  // uint32 m_port = 2;
  if (this->_internal_m_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_port(), target);
  }

  // uint64 m_timestamp = 3;
  if (this->_internal_m_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_m_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.addr.peer_details)
  return target;
}

size_t addr_peer_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.addr.peer_details)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_address = 1;
  if (!this->_internal_m_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_address());
  }

  // uint64 m_timestamp = 3;
  if (this->_internal_m_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_m_timestamp());
  }

  // uint32 m_port = 2;
  if (this->_internal_m_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addr_peer_details::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addr_peer_details::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addr_peer_details::GetClassData() const { return &_class_data_; }

void addr_peer_details::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addr_peer_details *>(to)->MergeFrom(
      static_cast<const addr_peer_details &>(from));
}


void addr_peer_details::MergeFrom(const addr_peer_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.addr.peer_details)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_address().empty()) {
    _internal_set_m_address(from._internal_m_address());
  }
  if (from._internal_m_timestamp() != 0) {
    _internal_set_m_timestamp(from._internal_m_timestamp());
  }
  if (from._internal_m_port() != 0) {
    _internal_set_m_port(from._internal_m_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addr_peer_details::CopyFrom(const addr_peer_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.addr.peer_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addr_peer_details::IsInitialized() const {
  return true;
}

void addr_peer_details::InternalSwap(addr_peer_details* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_address_, lhs_arena,
      &other->m_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addr_peer_details, m_port_)
      + sizeof(addr_peer_details::m_port_)
      - PROTOBUF_FIELD_OFFSET(addr_peer_details, m_timestamp_)>(
          reinterpret_cast<char*>(&m_timestamp_),
          reinterpret_cast<char*>(&other->m_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addr_peer_details::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[6]);
}

// ===================================================================

class addr::_Internal {
 public:
};

addr::addr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_peer_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.addr)
}
addr::addr(const addr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_peer_list_(from.m_peer_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.addr)
}

inline void addr::SharedCtor() {
}

addr::~addr() {
  // @@protoc_insertion_point(destructor:proto.addr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void addr::ArenaDtor(void* object) {
  addr* _this = reinterpret_cast< addr* >(object);
  (void)_this;
}
void addr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addr::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.addr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_peer_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.addr.peer_details m_peer_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_peer_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.addr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.addr.peer_details m_peer_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_peer_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_peer_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.addr)
  return target;
}

size_t addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.addr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.addr.peer_details m_peer_list = 1;
  total_size += 1UL * this->_internal_m_peer_list_size();
  for (const auto& msg : this->m_peer_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addr::GetClassData() const { return &_class_data_; }

void addr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addr *>(to)->MergeFrom(
      static_cast<const addr &>(from));
}


void addr::MergeFrom(const addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.addr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_peer_list_.MergeFrom(from.m_peer_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addr::CopyFrom(const addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addr::IsInitialized() const {
  return true;
}

void addr::InternalSwap(addr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_peer_list_.InternalSwap(&other->m_peer_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[7]);
}

// ===================================================================

class all_active_votings_for_voter::_Internal {
 public:
};

all_active_votings_for_voter::all_active_votings_for_voter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_voting_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.all_active_votings_for_voter)
}
all_active_votings_for_voter::all_active_votings_for_voter(const all_active_votings_for_voter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_voting_ids_(from.m_voting_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.all_active_votings_for_voter)
}

inline void all_active_votings_for_voter::SharedCtor() {
}

all_active_votings_for_voter::~all_active_votings_for_voter() {
  // @@protoc_insertion_point(destructor:proto.all_active_votings_for_voter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void all_active_votings_for_voter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void all_active_votings_for_voter::ArenaDtor(void* object) {
  all_active_votings_for_voter* _this = reinterpret_cast< all_active_votings_for_voter* >(object);
  (void)_this;
}
void all_active_votings_for_voter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void all_active_votings_for_voter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void all_active_votings_for_voter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.all_active_votings_for_voter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_voting_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* all_active_votings_for_voter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes m_voting_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_m_voting_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* all_active_votings_for_voter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.all_active_votings_for_voter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes m_voting_ids = 1;
  for (int i = 0, n = this->_internal_m_voting_ids_size(); i < n; i++) {
    const auto& s = this->_internal_m_voting_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.all_active_votings_for_voter)
  return target;
}

size_t all_active_votings_for_voter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.all_active_votings_for_voter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes m_voting_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(m_voting_ids_.size());
  for (int i = 0, n = m_voting_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      m_voting_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData all_active_votings_for_voter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    all_active_votings_for_voter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*all_active_votings_for_voter::GetClassData() const { return &_class_data_; }

void all_active_votings_for_voter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<all_active_votings_for_voter *>(to)->MergeFrom(
      static_cast<const all_active_votings_for_voter &>(from));
}


void all_active_votings_for_voter::MergeFrom(const all_active_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.all_active_votings_for_voter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_voting_ids_.MergeFrom(from.m_voting_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void all_active_votings_for_voter::CopyFrom(const all_active_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.all_active_votings_for_voter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_active_votings_for_voter::IsInitialized() const {
  return true;
}

void all_active_votings_for_voter::InternalSwap(all_active_votings_for_voter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_voting_ids_.InternalSwap(&other->m_voting_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata all_active_votings_for_voter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[8]);
}

// ===================================================================

class getheaders::_Internal {
 public:
};

getheaders::getheaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.getheaders)
}
getheaders::getheaders(const getheaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_hash_header_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_hash_header_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_hash_header_start().empty()) {
    m_hash_header_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_hash_header_start(), 
      GetArenaForAllocation());
  }
  m_hash_header_stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_hash_header_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_hash_header_stop().empty()) {
    m_hash_header_stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_hash_header_stop(), 
      GetArenaForAllocation());
  }
  m_version_ = from.m_version_;
  // @@protoc_insertion_point(copy_constructor:proto.getheaders)
}

inline void getheaders::SharedCtor() {
m_hash_header_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_hash_header_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_hash_header_stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_hash_header_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_version_ = 0u;
}

getheaders::~getheaders() {
  // @@protoc_insertion_point(destructor:proto.getheaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void getheaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_hash_header_start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_hash_header_stop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getheaders::ArenaDtor(void* object) {
  getheaders* _this = reinterpret_cast< getheaders* >(object);
  (void)_this;
}
void getheaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getheaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getheaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.getheaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_hash_header_start_.ClearToEmpty();
  m_hash_header_stop_.ClearToEmpty();
  m_version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getheaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed32 m_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          m_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bytes m_hash_header_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_hash_header_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_hash_header_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_hash_header_stop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getheaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.getheaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 m_version = 1;
  if (this->_internal_m_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_m_version(), target);
  }

  // bytes m_hash_header_start = 2;
  if (!this->_internal_m_hash_header_start().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_hash_header_start(), target);
  }

  // bytes m_hash_header_stop = 3;
  if (!this->_internal_m_hash_header_stop().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_m_hash_header_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.getheaders)
  return target;
}

size_t getheaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.getheaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_hash_header_start = 2;
  if (!this->_internal_m_hash_header_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_hash_header_start());
  }

  // bytes m_hash_header_stop = 3;
  if (!this->_internal_m_hash_header_stop().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_hash_header_stop());
  }

  // fixed32 m_version = 1;
  if (this->_internal_m_version() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getheaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getheaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getheaders::GetClassData() const { return &_class_data_; }

void getheaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getheaders *>(to)->MergeFrom(
      static_cast<const getheaders &>(from));
}


void getheaders::MergeFrom(const getheaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.getheaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_hash_header_start().empty()) {
    _internal_set_m_hash_header_start(from._internal_m_hash_header_start());
  }
  if (!from._internal_m_hash_header_stop().empty()) {
    _internal_set_m_hash_header_stop(from._internal_m_hash_header_stop());
  }
  if (from._internal_m_version() != 0) {
    _internal_set_m_version(from._internal_m_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getheaders::CopyFrom(const getheaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.getheaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getheaders::IsInitialized() const {
  return true;
}

void getheaders::InternalSwap(getheaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_hash_header_start_, lhs_arena,
      &other->m_hash_header_start_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_hash_header_stop_, lhs_arena,
      &other->m_hash_header_stop_, rhs_arena
  );
  swap(m_version_, other->m_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getheaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[9]);
}

// ===================================================================

class gettxs::_Internal {
 public:
};

gettxs::gettxs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.gettxs)
}
gettxs::gettxs(const gettxs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_hash_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_hash_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_hash_header().empty()) {
    m_hash_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_hash_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.gettxs)
}

inline void gettxs::SharedCtor() {
m_hash_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_hash_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

gettxs::~gettxs() {
  // @@protoc_insertion_point(destructor:proto.gettxs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void gettxs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_hash_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void gettxs::ArenaDtor(void* object) {
  gettxs* _this = reinterpret_cast< gettxs* >(object);
  (void)_this;
}
void gettxs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gettxs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gettxs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.gettxs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_hash_header_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gettxs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_hash_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_hash_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* gettxs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.gettxs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_hash_header = 1;
  if (!this->_internal_m_hash_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_hash_header(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.gettxs)
  return target;
}

size_t gettxs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.gettxs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_hash_header = 1;
  if (!this->_internal_m_hash_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_hash_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData gettxs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    gettxs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*gettxs::GetClassData() const { return &_class_data_; }

void gettxs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<gettxs *>(to)->MergeFrom(
      static_cast<const gettxs &>(from));
}


void gettxs::MergeFrom(const gettxs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.gettxs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_hash_header().empty()) {
    _internal_set_m_hash_header(from._internal_m_hash_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void gettxs::CopyFrom(const gettxs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.gettxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gettxs::IsInitialized() const {
  return true;
}

void gettxs::InternalSwap(gettxs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_hash_header_, lhs_arena,
      &other->m_hash_header_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata gettxs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[10]);
}

// ===================================================================

class getblock::_Internal {
 public:
};

getblock::getblock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.getblock)
}
getblock::getblock(const getblock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_hash_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_hash_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_hash_header().empty()) {
    m_hash_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_hash_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.getblock)
}

inline void getblock::SharedCtor() {
m_hash_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_hash_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getblock::~getblock() {
  // @@protoc_insertion_point(destructor:proto.getblock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void getblock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_hash_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getblock::ArenaDtor(void* object) {
  getblock* _this = reinterpret_cast< getblock* >(object);
  (void)_this;
}
void getblock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getblock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getblock::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.getblock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_hash_header_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getblock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_hash_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_hash_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getblock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.getblock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_hash_header = 1;
  if (!this->_internal_m_hash_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_hash_header(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.getblock)
  return target;
}

size_t getblock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.getblock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_hash_header = 1;
  if (!this->_internal_m_hash_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_hash_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getblock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getblock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getblock::GetClassData() const { return &_class_data_; }

void getblock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getblock *>(to)->MergeFrom(
      static_cast<const getblock &>(from));
}


void getblock::MergeFrom(const getblock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.getblock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_hash_header().empty()) {
    _internal_set_m_hash_header(from._internal_m_hash_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getblock::CopyFrom(const getblock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.getblock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getblock::IsInitialized() const {
  return true;
}

void getblock::InternalSwap(getblock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_hash_header_, lhs_arena,
      &other->m_hash_header_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata getblock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[11]);
}

// ===================================================================

class getmempooltransactions::_Internal {
 public:
};

getmempooltransactions::getmempooltransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.getmempooltransactions)
}
getmempooltransactions::getmempooltransactions(const getmempooltransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.getmempooltransactions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getmempooltransactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getmempooltransactions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata getmempooltransactions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[12]);
}

// ===================================================================

class getaddr::_Internal {
 public:
};

getaddr::getaddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.getaddr)
}
getaddr::getaddr(const getaddr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.getaddr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getaddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getaddr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata getaddr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[13]);
}

// ===================================================================

class getmerklebranch::_Internal {
 public:
};

getmerklebranch::getmerklebranch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.getmerklebranch)
}
getmerklebranch::getmerklebranch(const getmerklebranch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_txid().empty()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.getmerklebranch)
}

inline void getmerklebranch::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getmerklebranch::~getmerklebranch() {
  // @@protoc_insertion_point(destructor:proto.getmerklebranch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void getmerklebranch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getmerklebranch::ArenaDtor(void* object) {
  getmerklebranch* _this = reinterpret_cast< getmerklebranch* >(object);
  (void)_this;
}
void getmerklebranch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getmerklebranch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getmerklebranch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.getmerklebranch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_txid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getmerklebranch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getmerklebranch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.getmerklebranch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.getmerklebranch)
  return target;
}

size_t getmerklebranch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.getmerklebranch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getmerklebranch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getmerklebranch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getmerklebranch::GetClassData() const { return &_class_data_; }

void getmerklebranch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getmerklebranch *>(to)->MergeFrom(
      static_cast<const getmerklebranch &>(from));
}


void getmerklebranch::MergeFrom(const getmerklebranch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.getmerklebranch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_txid().empty()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getmerklebranch::CopyFrom(const getmerklebranch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.getmerklebranch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmerklebranch::IsInitialized() const {
  return true;
}

void getmerklebranch::InternalSwap(getmerklebranch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata getmerklebranch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[14]);
}

// ===================================================================

class merkle_branch::_Internal {
 public:
  using HasBits = decltype(std::declval<merkle_branch>()._has_bits_);
  static void set_has_m_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

merkle_branch::merkle_branch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_merkle_branch_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.merkle_branch)
}
merkle_branch::merkle_branch(const merkle_branch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_merkle_branch_(from.m_merkle_branch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_block_id()) {
    m_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_block_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.merkle_branch)
}

inline void merkle_branch::SharedCtor() {
m_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

merkle_branch::~merkle_branch() {
  // @@protoc_insertion_point(destructor:proto.merkle_branch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void merkle_branch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void merkle_branch::ArenaDtor(void* object) {
  merkle_branch* _this = reinterpret_cast< merkle_branch* >(object);
  (void)_this;
}
void merkle_branch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void merkle_branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void merkle_branch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.merkle_branch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_merkle_branch_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_block_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* merkle_branch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes m_merkle_branch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_m_merkle_branch();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes m_block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* merkle_branch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.merkle_branch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes m_merkle_branch = 1;
  for (int i = 0, n = this->_internal_m_merkle_branch_size(); i < n; i++) {
    const auto& s = this->_internal_m_merkle_branch(i);
    target = stream->WriteBytes(1, s, target);
  }

  // optional bytes m_block_id = 2;
  if (_internal_has_m_block_id()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.merkle_branch)
  return target;
}

size_t merkle_branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.merkle_branch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes m_merkle_branch = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(m_merkle_branch_.size());
  for (int i = 0, n = m_merkle_branch_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      m_merkle_branch_.Get(i));
  }

  // optional bytes m_block_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_block_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData merkle_branch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    merkle_branch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*merkle_branch::GetClassData() const { return &_class_data_; }

void merkle_branch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<merkle_branch *>(to)->MergeFrom(
      static_cast<const merkle_branch &>(from));
}


void merkle_branch::MergeFrom(const merkle_branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.merkle_branch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_merkle_branch_.MergeFrom(from.m_merkle_branch_);
  if (from._internal_has_m_block_id()) {
    _internal_set_m_block_id(from._internal_m_block_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void merkle_branch::CopyFrom(const merkle_branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.merkle_branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool merkle_branch::IsInitialized() const {
  return true;
}

void merkle_branch::InternalSwap(merkle_branch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_merkle_branch_.InternalSwap(&other->m_merkle_branch_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_block_id_, lhs_arena,
      &other->m_block_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata merkle_branch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[15]);
}

// ===================================================================

class get_all_active_votings_for_voter::_Internal {
 public:
};

get_all_active_votings_for_voter::get_all_active_votings_for_voter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.get_all_active_votings_for_voter)
}
get_all_active_votings_for_voter::get_all_active_votings_for_voter(const get_all_active_votings_for_voter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_voter_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_voter_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_voter_pk().empty()) {
    m_voter_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_voter_pk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.get_all_active_votings_for_voter)
}

inline void get_all_active_votings_for_voter::SharedCtor() {
m_voter_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_voter_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

get_all_active_votings_for_voter::~get_all_active_votings_for_voter() {
  // @@protoc_insertion_point(destructor:proto.get_all_active_votings_for_voter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_all_active_votings_for_voter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_voter_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_all_active_votings_for_voter::ArenaDtor(void* object) {
  get_all_active_votings_for_voter* _this = reinterpret_cast< get_all_active_votings_for_voter* >(object);
  (void)_this;
}
void get_all_active_votings_for_voter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_all_active_votings_for_voter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_all_active_votings_for_voter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.get_all_active_votings_for_voter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_voter_pk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_all_active_votings_for_voter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_voter_pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_voter_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* get_all_active_votings_for_voter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.get_all_active_votings_for_voter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_voter_pk = 1;
  if (!this->_internal_m_voter_pk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_voter_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.get_all_active_votings_for_voter)
  return target;
}

size_t get_all_active_votings_for_voter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.get_all_active_votings_for_voter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_voter_pk = 1;
  if (!this->_internal_m_voter_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_voter_pk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_all_active_votings_for_voter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_all_active_votings_for_voter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_all_active_votings_for_voter::GetClassData() const { return &_class_data_; }

void get_all_active_votings_for_voter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<get_all_active_votings_for_voter *>(to)->MergeFrom(
      static_cast<const get_all_active_votings_for_voter &>(from));
}


void get_all_active_votings_for_voter::MergeFrom(const get_all_active_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.get_all_active_votings_for_voter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_voter_pk().empty()) {
    _internal_set_m_voter_pk(from._internal_m_voter_pk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_all_active_votings_for_voter::CopyFrom(const get_all_active_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.get_all_active_votings_for_voter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_active_votings_for_voter::IsInitialized() const {
  return true;
}

void get_all_active_votings_for_voter::InternalSwap(get_all_active_votings_for_voter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_voter_pk_, lhs_arena,
      &other->m_voter_pk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_all_active_votings_for_voter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[16]);
}

// ===================================================================

class get_amount_on_pkh::_Internal {
 public:
};

get_amount_on_pkh::get_amount_on_pkh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.get_amount_on_pkh)
}
get_amount_on_pkh::get_amount_on_pkh(const get_amount_on_pkh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_pkh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_pkh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pkh().empty()) {
    m_pkh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_pkh(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.get_amount_on_pkh)
}

inline void get_amount_on_pkh::SharedCtor() {
m_pkh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_pkh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

get_amount_on_pkh::~get_amount_on_pkh() {
  // @@protoc_insertion_point(destructor:proto.get_amount_on_pkh)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_amount_on_pkh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_pkh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_amount_on_pkh::ArenaDtor(void* object) {
  get_amount_on_pkh* _this = reinterpret_cast< get_amount_on_pkh* >(object);
  (void)_this;
}
void get_amount_on_pkh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_amount_on_pkh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_amount_on_pkh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.get_amount_on_pkh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_pkh_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_amount_on_pkh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_pkh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_pkh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* get_amount_on_pkh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.get_amount_on_pkh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_pkh = 1;
  if (!this->_internal_m_pkh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_pkh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.get_amount_on_pkh)
  return target;
}

size_t get_amount_on_pkh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.get_amount_on_pkh)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_pkh = 1;
  if (!this->_internal_m_pkh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pkh());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_amount_on_pkh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_amount_on_pkh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_amount_on_pkh::GetClassData() const { return &_class_data_; }

void get_amount_on_pkh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<get_amount_on_pkh *>(to)->MergeFrom(
      static_cast<const get_amount_on_pkh &>(from));
}


void get_amount_on_pkh::MergeFrom(const get_amount_on_pkh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.get_amount_on_pkh)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_pkh().empty()) {
    _internal_set_m_pkh(from._internal_m_pkh());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_amount_on_pkh::CopyFrom(const get_amount_on_pkh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.get_amount_on_pkh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_amount_on_pkh::IsInitialized() const {
  return true;
}

void get_amount_on_pkh::InternalSwap(get_amount_on_pkh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_pkh_, lhs_arena,
      &other->m_pkh_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_amount_on_pkh::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[17]);
}

// ===================================================================

class amount_on_pkh::_Internal {
 public:
  using HasBits = decltype(std::declval<amount_on_pkh>()._has_bits_);
  static void set_has_m_txid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

amount_on_pkh::amount_on_pkh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.amount_on_pkh)
}
amount_on_pkh::amount_on_pkh(const amount_on_pkh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_txid()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  m_amount_ = from.m_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.amount_on_pkh)
}

inline void amount_on_pkh::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_amount_ = 0u;
}

amount_on_pkh::~amount_on_pkh() {
  // @@protoc_insertion_point(destructor:proto.amount_on_pkh)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void amount_on_pkh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void amount_on_pkh::ArenaDtor(void* object) {
  amount_on_pkh* _this = reinterpret_cast< amount_on_pkh* >(object);
  (void)_this;
}
void amount_on_pkh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void amount_on_pkh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void amount_on_pkh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.amount_on_pkh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_txid_.ClearNonDefaultToEmpty();
  }
  m_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* amount_on_pkh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 m_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          m_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes m_txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* amount_on_pkh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.amount_on_pkh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_amount = 1;
  if (this->_internal_m_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_amount(), target);
  }

  // optional bytes m_txid = 2;
  if (_internal_has_m_txid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.amount_on_pkh)
  return target;
}

size_t amount_on_pkh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.amount_on_pkh)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes m_txid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  // uint32 m_amount = 1;
  if (this->_internal_m_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_m_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData amount_on_pkh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    amount_on_pkh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*amount_on_pkh::GetClassData() const { return &_class_data_; }

void amount_on_pkh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<amount_on_pkh *>(to)->MergeFrom(
      static_cast<const amount_on_pkh &>(from));
}


void amount_on_pkh::MergeFrom(const amount_on_pkh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.amount_on_pkh)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_txid()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  if (from._internal_m_amount() != 0) {
    _internal_set_m_amount(from._internal_m_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void amount_on_pkh::CopyFrom(const amount_on_pkh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.amount_on_pkh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool amount_on_pkh::IsInitialized() const {
  return true;
}

void amount_on_pkh::InternalSwap(amount_on_pkh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
  swap(m_amount_, other->m_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata amount_on_pkh::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[18]);
}

// ===================================================================

class get_transaction::_Internal {
 public:
};

get_transaction::get_transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.get_transaction)
}
get_transaction::get_transaction(const get_transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_txid().empty()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.get_transaction)
}

inline void get_transaction::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

get_transaction::~get_transaction() {
  // @@protoc_insertion_point(destructor:proto.get_transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_transaction::ArenaDtor(void* object) {
  get_transaction* _this = reinterpret_cast< get_transaction* >(object);
  (void)_this;
}
void get_transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.get_transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_txid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* get_transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.get_transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.get_transaction)
  return target;
}

size_t get_transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.get_transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction::GetClassData() const { return &_class_data_; }

void get_transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<get_transaction *>(to)->MergeFrom(
      static_cast<const get_transaction &>(from));
}


void get_transaction::MergeFrom(const get_transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.get_transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_txid().empty()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction::CopyFrom(const get_transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.get_transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction::IsInitialized() const {
  return true;
}

void get_transaction::InternalSwap(get_transaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[19]);
}

// ===================================================================

class get_authorization_txid::_Internal {
 public:
};

get_authorization_txid::get_authorization_txid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.get_authorization_txid)
}
get_authorization_txid::get_authorization_txid(const get_authorization_txid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pk().empty()) {
    m_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_pk(), 
      GetArenaForAllocation());
  }
  m_voting_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_voting_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_voting_id().empty()) {
    m_voting_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_voting_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.get_authorization_txid)
}

inline void get_authorization_txid::SharedCtor() {
m_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
m_voting_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_voting_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

get_authorization_txid::~get_authorization_txid() {
  // @@protoc_insertion_point(destructor:proto.get_authorization_txid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_authorization_txid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_voting_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_authorization_txid::ArenaDtor(void* object) {
  get_authorization_txid* _this = reinterpret_cast< get_authorization_txid* >(object);
  (void)_this;
}
void get_authorization_txid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_authorization_txid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_authorization_txid::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.get_authorization_txid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_pk_.ClearToEmpty();
  m_voting_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_authorization_txid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_voting_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_voting_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* get_authorization_txid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.get_authorization_txid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_pk = 1;
  if (!this->_internal_m_pk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_pk(), target);
  }

  // bytes m_voting_id = 2;
  if (!this->_internal_m_voting_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_voting_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.get_authorization_txid)
  return target;
}

size_t get_authorization_txid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.get_authorization_txid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_pk = 1;
  if (!this->_internal_m_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pk());
  }

  // bytes m_voting_id = 2;
  if (!this->_internal_m_voting_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_voting_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_authorization_txid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_authorization_txid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_authorization_txid::GetClassData() const { return &_class_data_; }

void get_authorization_txid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<get_authorization_txid *>(to)->MergeFrom(
      static_cast<const get_authorization_txid &>(from));
}


void get_authorization_txid::MergeFrom(const get_authorization_txid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.get_authorization_txid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_pk().empty()) {
    _internal_set_m_pk(from._internal_m_pk());
  }
  if (!from._internal_m_voting_id().empty()) {
    _internal_set_m_voting_id(from._internal_m_voting_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_authorization_txid::CopyFrom(const get_authorization_txid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.get_authorization_txid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_authorization_txid::IsInitialized() const {
  return true;
}

void get_authorization_txid::InternalSwap(get_authorization_txid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_pk_, lhs_arena,
      &other->m_pk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_voting_id_, lhs_arena,
      &other->m_voting_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_authorization_txid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[20]);
}

// ===================================================================

class authorization_txid::_Internal {
 public:
};

authorization_txid::authorization_txid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.authorization_txid)
}
authorization_txid::authorization_txid(const authorization_txid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_txid().empty()) {
    m_txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_txid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.authorization_txid)
}

inline void authorization_txid::SharedCtor() {
m_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

authorization_txid::~authorization_txid() {
  // @@protoc_insertion_point(destructor:proto.authorization_txid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void authorization_txid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void authorization_txid::ArenaDtor(void* object) {
  authorization_txid* _this = reinterpret_cast< authorization_txid* >(object);
  (void)_this;
}
void authorization_txid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void authorization_txid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void authorization_txid::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.authorization_txid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_txid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* authorization_txid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* authorization_txid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.authorization_txid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.authorization_txid)
  return target;
}

size_t authorization_txid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.authorization_txid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_txid = 1;
  if (!this->_internal_m_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_txid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData authorization_txid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    authorization_txid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*authorization_txid::GetClassData() const { return &_class_data_; }

void authorization_txid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<authorization_txid *>(to)->MergeFrom(
      static_cast<const authorization_txid &>(from));
}


void authorization_txid::MergeFrom(const authorization_txid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.authorization_txid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_txid().empty()) {
    _internal_set_m_txid(from._internal_m_txid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void authorization_txid::CopyFrom(const authorization_txid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.authorization_txid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authorization_txid::IsInitialized() const {
  return true;
}

void authorization_txid::InternalSwap(authorization_txid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_txid_, lhs_arena,
      &other->m_txid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata authorization_txid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[21]);
}

// ===================================================================

class get_all_finished_votings_for_voter::_Internal {
 public:
};

get_all_finished_votings_for_voter::get_all_finished_votings_for_voter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.get_all_finished_votings_for_voter)
}
get_all_finished_votings_for_voter::get_all_finished_votings_for_voter(const get_all_finished_votings_for_voter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_voter_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    m_voter_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_voter_pk().empty()) {
    m_voter_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_voter_pk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.get_all_finished_votings_for_voter)
}

inline void get_all_finished_votings_for_voter::SharedCtor() {
m_voter_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  m_voter_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

get_all_finished_votings_for_voter::~get_all_finished_votings_for_voter() {
  // @@protoc_insertion_point(destructor:proto.get_all_finished_votings_for_voter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_all_finished_votings_for_voter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_voter_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_all_finished_votings_for_voter::ArenaDtor(void* object) {
  get_all_finished_votings_for_voter* _this = reinterpret_cast< get_all_finished_votings_for_voter* >(object);
  (void)_this;
}
void get_all_finished_votings_for_voter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_all_finished_votings_for_voter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_all_finished_votings_for_voter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.get_all_finished_votings_for_voter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_voter_pk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_all_finished_votings_for_voter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes m_voter_pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_voter_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* get_all_finished_votings_for_voter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.get_all_finished_votings_for_voter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes m_voter_pk = 1;
  if (!this->_internal_m_voter_pk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m_voter_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.get_all_finished_votings_for_voter)
  return target;
}

size_t get_all_finished_votings_for_voter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.get_all_finished_votings_for_voter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_voter_pk = 1;
  if (!this->_internal_m_voter_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_voter_pk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_all_finished_votings_for_voter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_all_finished_votings_for_voter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_all_finished_votings_for_voter::GetClassData() const { return &_class_data_; }

void get_all_finished_votings_for_voter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<get_all_finished_votings_for_voter *>(to)->MergeFrom(
      static_cast<const get_all_finished_votings_for_voter &>(from));
}


void get_all_finished_votings_for_voter::MergeFrom(const get_all_finished_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.get_all_finished_votings_for_voter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_voter_pk().empty()) {
    _internal_set_m_voter_pk(from._internal_m_voter_pk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_all_finished_votings_for_voter::CopyFrom(const get_all_finished_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.get_all_finished_votings_for_voter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_finished_votings_for_voter::IsInitialized() const {
  return true;
}

void get_all_finished_votings_for_voter::InternalSwap(get_all_finished_votings_for_voter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m_voter_pk_, lhs_arena,
      &other->m_voter_pk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_all_finished_votings_for_voter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[22]);
}

// ===================================================================

class all_finished_votings_for_voter::_Internal {
 public:
};

all_finished_votings_for_voter::all_finished_votings_for_voter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_voting_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.all_finished_votings_for_voter)
}
all_finished_votings_for_voter::all_finished_votings_for_voter(const all_finished_votings_for_voter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_voting_ids_(from.m_voting_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.all_finished_votings_for_voter)
}

inline void all_finished_votings_for_voter::SharedCtor() {
}

all_finished_votings_for_voter::~all_finished_votings_for_voter() {
  // @@protoc_insertion_point(destructor:proto.all_finished_votings_for_voter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void all_finished_votings_for_voter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void all_finished_votings_for_voter::ArenaDtor(void* object) {
  all_finished_votings_for_voter* _this = reinterpret_cast< all_finished_votings_for_voter* >(object);
  (void)_this;
}
void all_finished_votings_for_voter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void all_finished_votings_for_voter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void all_finished_votings_for_voter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.all_finished_votings_for_voter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_voting_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* all_finished_votings_for_voter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes m_voting_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_m_voting_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* all_finished_votings_for_voter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.all_finished_votings_for_voter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes m_voting_ids = 1;
  for (int i = 0, n = this->_internal_m_voting_ids_size(); i < n; i++) {
    const auto& s = this->_internal_m_voting_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.all_finished_votings_for_voter)
  return target;
}

size_t all_finished_votings_for_voter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.all_finished_votings_for_voter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes m_voting_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(m_voting_ids_.size());
  for (int i = 0, n = m_voting_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      m_voting_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData all_finished_votings_for_voter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    all_finished_votings_for_voter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*all_finished_votings_for_voter::GetClassData() const { return &_class_data_; }

void all_finished_votings_for_voter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<all_finished_votings_for_voter *>(to)->MergeFrom(
      static_cast<const all_finished_votings_for_voter &>(from));
}


void all_finished_votings_for_voter::MergeFrom(const all_finished_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.all_finished_votings_for_voter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_voting_ids_.MergeFrom(from.m_voting_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void all_finished_votings_for_voter::CopyFrom(const all_finished_votings_for_voter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.all_finished_votings_for_voter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_finished_votings_for_voter::IsInitialized() const {
  return true;
}

void all_finished_votings_for_voter::InternalSwap(all_finished_votings_for_voter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_voting_ids_.InternalSwap(&other->m_voting_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata all_finished_votings_for_voter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[23]);
}

// ===================================================================

class request::_Internal {
 public:
  static const ::proto::getheaders& m_getheaders(const request* msg);
  static const ::proto::gettxs& m_gettxs(const request* msg);
  static const ::proto::getblock& m_getblock(const request* msg);
  static const ::proto::getmempooltransactions& m_getmempooltransactions(const request* msg);
  static const ::proto::getaddr& m_getaddr(const request* msg);
  static const ::proto::getmerklebranch& m_getmerklebranch(const request* msg);
  static const ::proto::get_all_active_votings_for_voter& m_get_all_active_votings_for_voter(const request* msg);
  static const ::proto::get_amount_on_pkh& m_get_amount_on_pkh(const request* msg);
  static const ::proto::get_transaction& m_get_transaction(const request* msg);
  static const ::proto::get_authorization_txid& m_get_authorization_txid(const request* msg);
  static const ::proto::get_all_finished_votings_for_voter& m_get_all_finished_votings_for_voter(const request* msg);
};

const ::proto::getheaders&
request::_Internal::m_getheaders(const request* msg) {
  return *msg->request_type_.m_getheaders_;
}
const ::proto::gettxs&
request::_Internal::m_gettxs(const request* msg) {
  return *msg->request_type_.m_gettxs_;
}
const ::proto::getblock&
request::_Internal::m_getblock(const request* msg) {
  return *msg->request_type_.m_getblock_;
}
const ::proto::getmempooltransactions&
request::_Internal::m_getmempooltransactions(const request* msg) {
  return *msg->request_type_.m_getmempooltransactions_;
}
const ::proto::getaddr&
request::_Internal::m_getaddr(const request* msg) {
  return *msg->request_type_.m_getaddr_;
}
const ::proto::getmerklebranch&
request::_Internal::m_getmerklebranch(const request* msg) {
  return *msg->request_type_.m_getmerklebranch_;
}
const ::proto::get_all_active_votings_for_voter&
request::_Internal::m_get_all_active_votings_for_voter(const request* msg) {
  return *msg->request_type_.m_get_all_active_votings_for_voter_;
}
const ::proto::get_amount_on_pkh&
request::_Internal::m_get_amount_on_pkh(const request* msg) {
  return *msg->request_type_.m_get_amount_on_pkh_;
}
const ::proto::get_transaction&
request::_Internal::m_get_transaction(const request* msg) {
  return *msg->request_type_.m_get_transaction_;
}
const ::proto::get_authorization_txid&
request::_Internal::m_get_authorization_txid(const request* msg) {
  return *msg->request_type_.m_get_authorization_txid_;
}
const ::proto::get_all_finished_votings_for_voter&
request::_Internal::m_get_all_finished_votings_for_voter(const request* msg) {
  return *msg->request_type_.m_get_all_finished_votings_for_voter_;
}
void request::set_allocated_m_getheaders(::proto::getheaders* m_getheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_getheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::getheaders>::GetOwningArena(m_getheaders);
    if (message_arena != submessage_arena) {
      m_getheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_getheaders, submessage_arena);
    }
    set_has_m_getheaders();
    request_type_.m_getheaders_ = m_getheaders;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_getheaders)
}
void request::set_allocated_m_gettxs(::proto::gettxs* m_gettxs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_gettxs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::gettxs>::GetOwningArena(m_gettxs);
    if (message_arena != submessage_arena) {
      m_gettxs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_gettxs, submessage_arena);
    }
    set_has_m_gettxs();
    request_type_.m_gettxs_ = m_gettxs;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_gettxs)
}
void request::set_allocated_m_getblock(::proto::getblock* m_getblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_getblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::getblock>::GetOwningArena(m_getblock);
    if (message_arena != submessage_arena) {
      m_getblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_getblock, submessage_arena);
    }
    set_has_m_getblock();
    request_type_.m_getblock_ = m_getblock;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_getblock)
}
void request::set_allocated_m_getmempooltransactions(::proto::getmempooltransactions* m_getmempooltransactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_getmempooltransactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::getmempooltransactions>::GetOwningArena(m_getmempooltransactions);
    if (message_arena != submessage_arena) {
      m_getmempooltransactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_getmempooltransactions, submessage_arena);
    }
    set_has_m_getmempooltransactions();
    request_type_.m_getmempooltransactions_ = m_getmempooltransactions;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_getmempooltransactions)
}
void request::set_allocated_m_getaddr(::proto::getaddr* m_getaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_getaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::getaddr>::GetOwningArena(m_getaddr);
    if (message_arena != submessage_arena) {
      m_getaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_getaddr, submessage_arena);
    }
    set_has_m_getaddr();
    request_type_.m_getaddr_ = m_getaddr;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_getaddr)
}
void request::set_allocated_m_getmerklebranch(::proto::getmerklebranch* m_getmerklebranch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_getmerklebranch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::getmerklebranch>::GetOwningArena(m_getmerklebranch);
    if (message_arena != submessage_arena) {
      m_getmerklebranch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_getmerklebranch, submessage_arena);
    }
    set_has_m_getmerklebranch();
    request_type_.m_getmerklebranch_ = m_getmerklebranch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_getmerklebranch)
}
void request::set_allocated_m_get_all_active_votings_for_voter(::proto::get_all_active_votings_for_voter* m_get_all_active_votings_for_voter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_get_all_active_votings_for_voter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::get_all_active_votings_for_voter>::GetOwningArena(m_get_all_active_votings_for_voter);
    if (message_arena != submessage_arena) {
      m_get_all_active_votings_for_voter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_get_all_active_votings_for_voter, submessage_arena);
    }
    set_has_m_get_all_active_votings_for_voter();
    request_type_.m_get_all_active_votings_for_voter_ = m_get_all_active_votings_for_voter;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_get_all_active_votings_for_voter)
}
void request::set_allocated_m_get_amount_on_pkh(::proto::get_amount_on_pkh* m_get_amount_on_pkh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_get_amount_on_pkh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::get_amount_on_pkh>::GetOwningArena(m_get_amount_on_pkh);
    if (message_arena != submessage_arena) {
      m_get_amount_on_pkh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_get_amount_on_pkh, submessage_arena);
    }
    set_has_m_get_amount_on_pkh();
    request_type_.m_get_amount_on_pkh_ = m_get_amount_on_pkh;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_get_amount_on_pkh)
}
void request::set_allocated_m_get_transaction(::proto::get_transaction* m_get_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_get_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::get_transaction>::GetOwningArena(m_get_transaction);
    if (message_arena != submessage_arena) {
      m_get_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_get_transaction, submessage_arena);
    }
    set_has_m_get_transaction();
    request_type_.m_get_transaction_ = m_get_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_get_transaction)
}
void request::set_allocated_m_get_authorization_txid(::proto::get_authorization_txid* m_get_authorization_txid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_get_authorization_txid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::get_authorization_txid>::GetOwningArena(m_get_authorization_txid);
    if (message_arena != submessage_arena) {
      m_get_authorization_txid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_get_authorization_txid, submessage_arena);
    }
    set_has_m_get_authorization_txid();
    request_type_.m_get_authorization_txid_ = m_get_authorization_txid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_get_authorization_txid)
}
void request::set_allocated_m_get_all_finished_votings_for_voter(::proto::get_all_finished_votings_for_voter* m_get_all_finished_votings_for_voter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (m_get_all_finished_votings_for_voter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::get_all_finished_votings_for_voter>::GetOwningArena(m_get_all_finished_votings_for_voter);
    if (message_arena != submessage_arena) {
      m_get_all_finished_votings_for_voter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_get_all_finished_votings_for_voter, submessage_arena);
    }
    set_has_m_get_all_finished_votings_for_voter();
    request_type_.m_get_all_finished_votings_for_voter_ = m_get_all_finished_votings_for_voter;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.request.m_get_all_finished_votings_for_voter)
}
request::request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.request)
}
request::request(const request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request_type();
  switch (from.request_type_case()) {
    case kMGetheaders: {
      _internal_mutable_m_getheaders()->::proto::getheaders::MergeFrom(from._internal_m_getheaders());
      break;
    }
    case kMGettxs: {
      _internal_mutable_m_gettxs()->::proto::gettxs::MergeFrom(from._internal_m_gettxs());
      break;
    }
    case kMGetblock: {
      _internal_mutable_m_getblock()->::proto::getblock::MergeFrom(from._internal_m_getblock());
      break;
    }
    case kMGetmempooltransactions: {
      _internal_mutable_m_getmempooltransactions()->::proto::getmempooltransactions::MergeFrom(from._internal_m_getmempooltransactions());
      break;
    }
    case kMGetaddr: {
      _internal_mutable_m_getaddr()->::proto::getaddr::MergeFrom(from._internal_m_getaddr());
      break;
    }
    case kMGetmerklebranch: {
      _internal_mutable_m_getmerklebranch()->::proto::getmerklebranch::MergeFrom(from._internal_m_getmerklebranch());
      break;
    }
    case kMGetAllActiveVotingsForVoter: {
      _internal_mutable_m_get_all_active_votings_for_voter()->::proto::get_all_active_votings_for_voter::MergeFrom(from._internal_m_get_all_active_votings_for_voter());
      break;
    }
    case kMGetAmountOnPkh: {
      _internal_mutable_m_get_amount_on_pkh()->::proto::get_amount_on_pkh::MergeFrom(from._internal_m_get_amount_on_pkh());
      break;
    }
    case kMGetTransaction: {
      _internal_mutable_m_get_transaction()->::proto::get_transaction::MergeFrom(from._internal_m_get_transaction());
      break;
    }
    case kMGetAuthorizationTxid: {
      _internal_mutable_m_get_authorization_txid()->::proto::get_authorization_txid::MergeFrom(from._internal_m_get_authorization_txid());
      break;
    }
    case kMGetAllFinishedVotingsForVoter: {
      _internal_mutable_m_get_all_finished_votings_for_voter()->::proto::get_all_finished_votings_for_voter::MergeFrom(from._internal_m_get_all_finished_votings_for_voter());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.request)
}

inline void request::SharedCtor() {
clear_has_request_type();
}

request::~request() {
  // @@protoc_insertion_point(destructor:proto.request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request_type()) {
    clear_request_type();
  }
}

void request::ArenaDtor(void* object) {
  request* _this = reinterpret_cast< request* >(object);
  (void)_this;
}
void request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void request::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.request)
  switch (request_type_case()) {
    case kMGetheaders: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_getheaders_;
      }
      break;
    }
    case kMGettxs: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_gettxs_;
      }
      break;
    }
    case kMGetblock: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_getblock_;
      }
      break;
    }
    case kMGetmempooltransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_getmempooltransactions_;
      }
      break;
    }
    case kMGetaddr: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_getaddr_;
      }
      break;
    }
    case kMGetmerklebranch: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_getmerklebranch_;
      }
      break;
    }
    case kMGetAllActiveVotingsForVoter: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_get_all_active_votings_for_voter_;
      }
      break;
    }
    case kMGetAmountOnPkh: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_get_amount_on_pkh_;
      }
      break;
    }
    case kMGetTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_get_transaction_;
      }
      break;
    }
    case kMGetAuthorizationTxid: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_get_authorization_txid_;
      }
      break;
    }
    case kMGetAllFinishedVotingsForVoter: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.m_get_all_finished_votings_for_voter_;
      }
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.getheaders m_getheaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_getheaders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.gettxs m_gettxs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_gettxs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.getblock m_getblock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_getblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.getmempooltransactions m_getmempooltransactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_getmempooltransactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.getaddr m_getaddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_getaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.getmerklebranch m_getmerklebranch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_getmerklebranch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.get_all_active_votings_for_voter m_get_all_active_votings_for_voter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_get_all_active_votings_for_voter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.get_amount_on_pkh m_get_amount_on_pkh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_get_amount_on_pkh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.get_transaction m_get_transaction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_get_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.get_authorization_txid m_get_authorization_txid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_get_authorization_txid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.get_all_finished_votings_for_voter m_get_all_finished_votings_for_voter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_get_all_finished_votings_for_voter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.getheaders m_getheaders = 1;
  if (_internal_has_m_getheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_getheaders(this), target, stream);
  }

  // .proto.gettxs m_gettxs = 2;
  if (_internal_has_m_gettxs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::m_gettxs(this), target, stream);
  }

  // .proto.getblock m_getblock = 3;
  if (_internal_has_m_getblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::m_getblock(this), target, stream);
  }

  // .proto.getmempooltransactions m_getmempooltransactions = 4;
  if (_internal_has_m_getmempooltransactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::m_getmempooltransactions(this), target, stream);
  }

  // .proto.getaddr m_getaddr = 5;
  if (_internal_has_m_getaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::m_getaddr(this), target, stream);
  }

  // .proto.getmerklebranch m_getmerklebranch = 6;
  if (_internal_has_m_getmerklebranch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::m_getmerklebranch(this), target, stream);
  }

  // .proto.get_all_active_votings_for_voter m_get_all_active_votings_for_voter = 8;
  if (_internal_has_m_get_all_active_votings_for_voter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::m_get_all_active_votings_for_voter(this), target, stream);
  }

  // .proto.get_amount_on_pkh m_get_amount_on_pkh = 9;
  if (_internal_has_m_get_amount_on_pkh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::m_get_amount_on_pkh(this), target, stream);
  }

  // .proto.get_transaction m_get_transaction = 10;
  if (_internal_has_m_get_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::m_get_transaction(this), target, stream);
  }

  // .proto.get_authorization_txid m_get_authorization_txid = 11;
  if (_internal_has_m_get_authorization_txid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::m_get_authorization_txid(this), target, stream);
  }

  // .proto.get_all_finished_votings_for_voter m_get_all_finished_votings_for_voter = 12;
  if (_internal_has_m_get_all_finished_votings_for_voter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::m_get_all_finished_votings_for_voter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_type_case()) {
    // .proto.getheaders m_getheaders = 1;
    case kMGetheaders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_getheaders_);
      break;
    }
    // .proto.gettxs m_gettxs = 2;
    case kMGettxs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_gettxs_);
      break;
    }
    // .proto.getblock m_getblock = 3;
    case kMGetblock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_getblock_);
      break;
    }
    // .proto.getmempooltransactions m_getmempooltransactions = 4;
    case kMGetmempooltransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_getmempooltransactions_);
      break;
    }
    // .proto.getaddr m_getaddr = 5;
    case kMGetaddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_getaddr_);
      break;
    }
    // .proto.getmerklebranch m_getmerklebranch = 6;
    case kMGetmerklebranch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_getmerklebranch_);
      break;
    }
    // .proto.get_all_active_votings_for_voter m_get_all_active_votings_for_voter = 8;
    case kMGetAllActiveVotingsForVoter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_get_all_active_votings_for_voter_);
      break;
    }
    // .proto.get_amount_on_pkh m_get_amount_on_pkh = 9;
    case kMGetAmountOnPkh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_get_amount_on_pkh_);
      break;
    }
    // .proto.get_transaction m_get_transaction = 10;
    case kMGetTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_get_transaction_);
      break;
    }
    // .proto.get_authorization_txid m_get_authorization_txid = 11;
    case kMGetAuthorizationTxid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_get_authorization_txid_);
      break;
    }
    // .proto.get_all_finished_votings_for_voter m_get_all_finished_votings_for_voter = 12;
    case kMGetAllFinishedVotingsForVoter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.m_get_all_finished_votings_for_voter_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*request::GetClassData() const { return &_class_data_; }

void request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<request *>(to)->MergeFrom(
      static_cast<const request &>(from));
}


void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_type_case()) {
    case kMGetheaders: {
      _internal_mutable_m_getheaders()->::proto::getheaders::MergeFrom(from._internal_m_getheaders());
      break;
    }
    case kMGettxs: {
      _internal_mutable_m_gettxs()->::proto::gettxs::MergeFrom(from._internal_m_gettxs());
      break;
    }
    case kMGetblock: {
      _internal_mutable_m_getblock()->::proto::getblock::MergeFrom(from._internal_m_getblock());
      break;
    }
    case kMGetmempooltransactions: {
      _internal_mutable_m_getmempooltransactions()->::proto::getmempooltransactions::MergeFrom(from._internal_m_getmempooltransactions());
      break;
    }
    case kMGetaddr: {
      _internal_mutable_m_getaddr()->::proto::getaddr::MergeFrom(from._internal_m_getaddr());
      break;
    }
    case kMGetmerklebranch: {
      _internal_mutable_m_getmerklebranch()->::proto::getmerklebranch::MergeFrom(from._internal_m_getmerklebranch());
      break;
    }
    case kMGetAllActiveVotingsForVoter: {
      _internal_mutable_m_get_all_active_votings_for_voter()->::proto::get_all_active_votings_for_voter::MergeFrom(from._internal_m_get_all_active_votings_for_voter());
      break;
    }
    case kMGetAmountOnPkh: {
      _internal_mutable_m_get_amount_on_pkh()->::proto::get_amount_on_pkh::MergeFrom(from._internal_m_get_amount_on_pkh());
      break;
    }
    case kMGetTransaction: {
      _internal_mutable_m_get_transaction()->::proto::get_transaction::MergeFrom(from._internal_m_get_transaction());
      break;
    }
    case kMGetAuthorizationTxid: {
      _internal_mutable_m_get_authorization_txid()->::proto::get_authorization_txid::MergeFrom(from._internal_m_get_authorization_txid());
      break;
    }
    case kMGetAllFinishedVotingsForVoter: {
      _internal_mutable_m_get_all_finished_votings_for_voter()->::proto::get_all_finished_votings_for_voter::MergeFrom(from._internal_m_get_all_finished_votings_for_voter());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  return true;
}

void request::InternalSwap(request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_type_, other->request_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[24]);
}

// ===================================================================

class proto_massage::_Internal {
 public:
  static const ::proto::request& m_request(const proto_massage* msg);
  static const ::proto::headers& m_headers(const proto_massage* msg);
  static const ::proto::block& m_block(const proto_massage* msg);
  static const ::proto::transaction& m_transaction(const proto_massage* msg);
  static const ::proto::addr& m_addr(const proto_massage* msg);
  static const ::proto::merkle_branch& m_merkle_branch(const proto_massage* msg);
  static const ::proto::all_active_votings_for_voter& m_all_active_votings_for_voter(const proto_massage* msg);
  static const ::proto::amount_on_pkh& m_amount_on_pkh(const proto_massage* msg);
  static const ::proto::authorization_txid& m_authorization_txid(const proto_massage* msg);
  static const ::proto::all_finished_votings_for_voter& m_all_finished_votings_for_voter(const proto_massage* msg);
};

const ::proto::request&
proto_massage::_Internal::m_request(const proto_massage* msg) {
  return *msg->message_type_.m_request_;
}
const ::proto::headers&
proto_massage::_Internal::m_headers(const proto_massage* msg) {
  return *msg->message_type_.m_headers_;
}
const ::proto::block&
proto_massage::_Internal::m_block(const proto_massage* msg) {
  return *msg->message_type_.m_block_;
}
const ::proto::transaction&
proto_massage::_Internal::m_transaction(const proto_massage* msg) {
  return *msg->message_type_.m_transaction_;
}
const ::proto::addr&
proto_massage::_Internal::m_addr(const proto_massage* msg) {
  return *msg->message_type_.m_addr_;
}
const ::proto::merkle_branch&
proto_massage::_Internal::m_merkle_branch(const proto_massage* msg) {
  return *msg->message_type_.m_merkle_branch_;
}
const ::proto::all_active_votings_for_voter&
proto_massage::_Internal::m_all_active_votings_for_voter(const proto_massage* msg) {
  return *msg->message_type_.m_all_active_votings_for_voter_;
}
const ::proto::amount_on_pkh&
proto_massage::_Internal::m_amount_on_pkh(const proto_massage* msg) {
  return *msg->message_type_.m_amount_on_pkh_;
}
const ::proto::authorization_txid&
proto_massage::_Internal::m_authorization_txid(const proto_massage* msg) {
  return *msg->message_type_.m_authorization_txid_;
}
const ::proto::all_finished_votings_for_voter&
proto_massage::_Internal::m_all_finished_votings_for_voter(const proto_massage* msg) {
  return *msg->message_type_.m_all_finished_votings_for_voter_;
}
void proto_massage::set_allocated_m_request(::proto::request* m_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::request>::GetOwningArena(m_request);
    if (message_arena != submessage_arena) {
      m_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_request, submessage_arena);
    }
    set_has_m_request();
    message_type_.m_request_ = m_request;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_request)
}
void proto_massage::set_allocated_m_headers(::proto::headers* m_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::headers>::GetOwningArena(m_headers);
    if (message_arena != submessage_arena) {
      m_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_headers, submessage_arena);
    }
    set_has_m_headers();
    message_type_.m_headers_ = m_headers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_headers)
}
void proto_massage::set_allocated_m_block(::proto::block* m_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::block>::GetOwningArena(m_block);
    if (message_arena != submessage_arena) {
      m_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_block, submessage_arena);
    }
    set_has_m_block();
    message_type_.m_block_ = m_block;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_block)
}
void proto_massage::set_allocated_m_transaction(::proto::transaction* m_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::transaction>::GetOwningArena(m_transaction);
    if (message_arena != submessage_arena) {
      m_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_transaction, submessage_arena);
    }
    set_has_m_transaction();
    message_type_.m_transaction_ = m_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_transaction)
}
void proto_massage::set_allocated_m_addr(::proto::addr* m_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::addr>::GetOwningArena(m_addr);
    if (message_arena != submessage_arena) {
      m_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_addr, submessage_arena);
    }
    set_has_m_addr();
    message_type_.m_addr_ = m_addr;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_addr)
}
void proto_massage::set_allocated_m_merkle_branch(::proto::merkle_branch* m_merkle_branch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_merkle_branch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::merkle_branch>::GetOwningArena(m_merkle_branch);
    if (message_arena != submessage_arena) {
      m_merkle_branch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_merkle_branch, submessage_arena);
    }
    set_has_m_merkle_branch();
    message_type_.m_merkle_branch_ = m_merkle_branch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_merkle_branch)
}
void proto_massage::set_allocated_m_all_active_votings_for_voter(::proto::all_active_votings_for_voter* m_all_active_votings_for_voter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_all_active_votings_for_voter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::all_active_votings_for_voter>::GetOwningArena(m_all_active_votings_for_voter);
    if (message_arena != submessage_arena) {
      m_all_active_votings_for_voter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_all_active_votings_for_voter, submessage_arena);
    }
    set_has_m_all_active_votings_for_voter();
    message_type_.m_all_active_votings_for_voter_ = m_all_active_votings_for_voter;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_all_active_votings_for_voter)
}
void proto_massage::set_allocated_m_amount_on_pkh(::proto::amount_on_pkh* m_amount_on_pkh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_amount_on_pkh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::amount_on_pkh>::GetOwningArena(m_amount_on_pkh);
    if (message_arena != submessage_arena) {
      m_amount_on_pkh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_amount_on_pkh, submessage_arena);
    }
    set_has_m_amount_on_pkh();
    message_type_.m_amount_on_pkh_ = m_amount_on_pkh;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_amount_on_pkh)
}
void proto_massage::set_allocated_m_authorization_txid(::proto::authorization_txid* m_authorization_txid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_authorization_txid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::authorization_txid>::GetOwningArena(m_authorization_txid);
    if (message_arena != submessage_arena) {
      m_authorization_txid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_authorization_txid, submessage_arena);
    }
    set_has_m_authorization_txid();
    message_type_.m_authorization_txid_ = m_authorization_txid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_authorization_txid)
}
void proto_massage::set_allocated_m_all_finished_votings_for_voter(::proto::all_finished_votings_for_voter* m_all_finished_votings_for_voter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (m_all_finished_votings_for_voter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::all_finished_votings_for_voter>::GetOwningArena(m_all_finished_votings_for_voter);
    if (message_arena != submessage_arena) {
      m_all_finished_votings_for_voter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_all_finished_votings_for_voter, submessage_arena);
    }
    set_has_m_all_finished_votings_for_voter();
    message_type_.m_all_finished_votings_for_voter_ = m_all_finished_votings_for_voter;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.proto_massage.m_all_finished_votings_for_voter)
}
proto_massage::proto_massage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.proto_massage)
}
proto_massage::proto_massage(const proto_massage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_type();
  switch (from.message_type_case()) {
    case kMRequest: {
      _internal_mutable_m_request()->::proto::request::MergeFrom(from._internal_m_request());
      break;
    }
    case kMHeaders: {
      _internal_mutable_m_headers()->::proto::headers::MergeFrom(from._internal_m_headers());
      break;
    }
    case kMBlock: {
      _internal_mutable_m_block()->::proto::block::MergeFrom(from._internal_m_block());
      break;
    }
    case kMTransaction: {
      _internal_mutable_m_transaction()->::proto::transaction::MergeFrom(from._internal_m_transaction());
      break;
    }
    case kMAddr: {
      _internal_mutable_m_addr()->::proto::addr::MergeFrom(from._internal_m_addr());
      break;
    }
    case kMMerkleBranch: {
      _internal_mutable_m_merkle_branch()->::proto::merkle_branch::MergeFrom(from._internal_m_merkle_branch());
      break;
    }
    case kMAllActiveVotingsForVoter: {
      _internal_mutable_m_all_active_votings_for_voter()->::proto::all_active_votings_for_voter::MergeFrom(from._internal_m_all_active_votings_for_voter());
      break;
    }
    case kMAmountOnPkh: {
      _internal_mutable_m_amount_on_pkh()->::proto::amount_on_pkh::MergeFrom(from._internal_m_amount_on_pkh());
      break;
    }
    case kMAuthorizationTxid: {
      _internal_mutable_m_authorization_txid()->::proto::authorization_txid::MergeFrom(from._internal_m_authorization_txid());
      break;
    }
    case kMAllFinishedVotingsForVoter: {
      _internal_mutable_m_all_finished_votings_for_voter()->::proto::all_finished_votings_for_voter::MergeFrom(from._internal_m_all_finished_votings_for_voter());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.proto_massage)
}

inline void proto_massage::SharedCtor() {
clear_has_message_type();
}

proto_massage::~proto_massage() {
  // @@protoc_insertion_point(destructor:proto.proto_massage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void proto_massage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_type()) {
    clear_message_type();
  }
}

void proto_massage::ArenaDtor(void* object) {
  proto_massage* _this = reinterpret_cast< proto_massage* >(object);
  (void)_this;
}
void proto_massage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proto_massage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void proto_massage::clear_message_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.proto_massage)
  switch (message_type_case()) {
    case kMRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_request_;
      }
      break;
    }
    case kMHeaders: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_headers_;
      }
      break;
    }
    case kMBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_block_;
      }
      break;
    }
    case kMTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_transaction_;
      }
      break;
    }
    case kMAddr: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_addr_;
      }
      break;
    }
    case kMMerkleBranch: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_merkle_branch_;
      }
      break;
    }
    case kMAllActiveVotingsForVoter: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_all_active_votings_for_voter_;
      }
      break;
    }
    case kMAmountOnPkh: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_amount_on_pkh_;
      }
      break;
    }
    case kMAuthorizationTxid: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_authorization_txid_;
      }
      break;
    }
    case kMAllFinishedVotingsForVoter: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.m_all_finished_votings_for_voter_;
      }
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}


void proto_massage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.proto_massage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proto_massage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.request m_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.headers m_headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.block m_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.transaction m_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.addr m_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.merkle_branch m_merkle_branch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_merkle_branch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.all_active_votings_for_voter m_all_active_votings_for_voter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_all_active_votings_for_voter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.amount_on_pkh m_amount_on_pkh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_amount_on_pkh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.authorization_txid m_authorization_txid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_authorization_txid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.all_finished_votings_for_voter m_all_finished_votings_for_voter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_all_finished_votings_for_voter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* proto_massage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.proto_massage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.request m_request = 1;
  if (_internal_has_m_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_request(this), target, stream);
  }

  // .proto.headers m_headers = 2;
  if (_internal_has_m_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::m_headers(this), target, stream);
  }

  // .proto.block m_block = 3;
  if (_internal_has_m_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::m_block(this), target, stream);
  }

  // .proto.transaction m_transaction = 4;
  if (_internal_has_m_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::m_transaction(this), target, stream);
  }

  // .proto.addr m_addr = 5;
  if (_internal_has_m_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::m_addr(this), target, stream);
  }

  // .proto.merkle_branch m_merkle_branch = 7;
  if (_internal_has_m_merkle_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::m_merkle_branch(this), target, stream);
  }

  // .proto.all_active_votings_for_voter m_all_active_votings_for_voter = 8;
  if (_internal_has_m_all_active_votings_for_voter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::m_all_active_votings_for_voter(this), target, stream);
  }

  // .proto.amount_on_pkh m_amount_on_pkh = 9;
  if (_internal_has_m_amount_on_pkh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::m_amount_on_pkh(this), target, stream);
  }

  // .proto.authorization_txid m_authorization_txid = 10;
  if (_internal_has_m_authorization_txid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::m_authorization_txid(this), target, stream);
  }

  // .proto.all_finished_votings_for_voter m_all_finished_votings_for_voter = 11;
  if (_internal_has_m_all_finished_votings_for_voter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::m_all_finished_votings_for_voter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.proto_massage)
  return target;
}

size_t proto_massage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.proto_massage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_type_case()) {
    // .proto.request m_request = 1;
    case kMRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_request_);
      break;
    }
    // .proto.headers m_headers = 2;
    case kMHeaders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_headers_);
      break;
    }
    // .proto.block m_block = 3;
    case kMBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_block_);
      break;
    }
    // .proto.transaction m_transaction = 4;
    case kMTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_transaction_);
      break;
    }
    // .proto.addr m_addr = 5;
    case kMAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_addr_);
      break;
    }
    // .proto.merkle_branch m_merkle_branch = 7;
    case kMMerkleBranch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_merkle_branch_);
      break;
    }
    // .proto.all_active_votings_for_voter m_all_active_votings_for_voter = 8;
    case kMAllActiveVotingsForVoter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_all_active_votings_for_voter_);
      break;
    }
    // .proto.amount_on_pkh m_amount_on_pkh = 9;
    case kMAmountOnPkh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_amount_on_pkh_);
      break;
    }
    // .proto.authorization_txid m_authorization_txid = 10;
    case kMAuthorizationTxid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_authorization_txid_);
      break;
    }
    // .proto.all_finished_votings_for_voter m_all_finished_votings_for_voter = 11;
    case kMAllFinishedVotingsForVoter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.m_all_finished_votings_for_voter_);
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData proto_massage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    proto_massage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*proto_massage::GetClassData() const { return &_class_data_; }

void proto_massage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<proto_massage *>(to)->MergeFrom(
      static_cast<const proto_massage &>(from));
}


void proto_massage::MergeFrom(const proto_massage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.proto_massage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_type_case()) {
    case kMRequest: {
      _internal_mutable_m_request()->::proto::request::MergeFrom(from._internal_m_request());
      break;
    }
    case kMHeaders: {
      _internal_mutable_m_headers()->::proto::headers::MergeFrom(from._internal_m_headers());
      break;
    }
    case kMBlock: {
      _internal_mutable_m_block()->::proto::block::MergeFrom(from._internal_m_block());
      break;
    }
    case kMTransaction: {
      _internal_mutable_m_transaction()->::proto::transaction::MergeFrom(from._internal_m_transaction());
      break;
    }
    case kMAddr: {
      _internal_mutable_m_addr()->::proto::addr::MergeFrom(from._internal_m_addr());
      break;
    }
    case kMMerkleBranch: {
      _internal_mutable_m_merkle_branch()->::proto::merkle_branch::MergeFrom(from._internal_m_merkle_branch());
      break;
    }
    case kMAllActiveVotingsForVoter: {
      _internal_mutable_m_all_active_votings_for_voter()->::proto::all_active_votings_for_voter::MergeFrom(from._internal_m_all_active_votings_for_voter());
      break;
    }
    case kMAmountOnPkh: {
      _internal_mutable_m_amount_on_pkh()->::proto::amount_on_pkh::MergeFrom(from._internal_m_amount_on_pkh());
      break;
    }
    case kMAuthorizationTxid: {
      _internal_mutable_m_authorization_txid()->::proto::authorization_txid::MergeFrom(from._internal_m_authorization_txid());
      break;
    }
    case kMAllFinishedVotingsForVoter: {
      _internal_mutable_m_all_finished_votings_for_voter()->::proto::all_finished_votings_for_voter::MergeFrom(from._internal_m_all_finished_votings_for_voter());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void proto_massage::CopyFrom(const proto_massage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.proto_massage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_massage::IsInitialized() const {
  return true;
}

void proto_massage::InternalSwap(proto_massage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_type_, other->message_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata proto_massage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::transaction_vin* Arena::CreateMaybeMessage< ::proto::transaction_vin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::transaction_vin >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::transaction_vout* Arena::CreateMaybeMessage< ::proto::transaction_vout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::transaction_vout >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::transaction* Arena::CreateMaybeMessage< ::proto::transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::header* Arena::CreateMaybeMessage< ::proto::header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::header >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::headers* Arena::CreateMaybeMessage< ::proto::headers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::headers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::block* Arena::CreateMaybeMessage< ::proto::block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::block >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::addr_peer_details* Arena::CreateMaybeMessage< ::proto::addr_peer_details >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::addr_peer_details >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::addr* Arena::CreateMaybeMessage< ::proto::addr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::addr >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::all_active_votings_for_voter* Arena::CreateMaybeMessage< ::proto::all_active_votings_for_voter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::all_active_votings_for_voter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::getheaders* Arena::CreateMaybeMessage< ::proto::getheaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::getheaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::gettxs* Arena::CreateMaybeMessage< ::proto::gettxs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::gettxs >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::getblock* Arena::CreateMaybeMessage< ::proto::getblock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::getblock >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::getmempooltransactions* Arena::CreateMaybeMessage< ::proto::getmempooltransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::getmempooltransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::getaddr* Arena::CreateMaybeMessage< ::proto::getaddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::getaddr >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::getmerklebranch* Arena::CreateMaybeMessage< ::proto::getmerklebranch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::getmerklebranch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::merkle_branch* Arena::CreateMaybeMessage< ::proto::merkle_branch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::merkle_branch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::get_all_active_votings_for_voter* Arena::CreateMaybeMessage< ::proto::get_all_active_votings_for_voter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::get_all_active_votings_for_voter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::get_amount_on_pkh* Arena::CreateMaybeMessage< ::proto::get_amount_on_pkh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::get_amount_on_pkh >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::amount_on_pkh* Arena::CreateMaybeMessage< ::proto::amount_on_pkh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::amount_on_pkh >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::get_transaction* Arena::CreateMaybeMessage< ::proto::get_transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::get_transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::get_authorization_txid* Arena::CreateMaybeMessage< ::proto::get_authorization_txid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::get_authorization_txid >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::authorization_txid* Arena::CreateMaybeMessage< ::proto::authorization_txid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::authorization_txid >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::get_all_finished_votings_for_voter* Arena::CreateMaybeMessage< ::proto::get_all_finished_votings_for_voter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::get_all_finished_votings_for_voter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::all_finished_votings_for_voter* Arena::CreateMaybeMessage< ::proto::all_finished_votings_for_voter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::all_finished_votings_for_voter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::request* Arena::CreateMaybeMessage< ::proto::request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::proto_massage* Arena::CreateMaybeMessage< ::proto::proto_massage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::proto_massage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
